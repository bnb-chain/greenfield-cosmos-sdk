// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: cosmos/crosschain/v1/query.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryParamsRequest is the request type for the Query/Params RPC method.
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3c0bc65cbea0cca3, []int{0}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is the response type for the Query/Params RPC method.
type QueryParamsResponse struct {
	// params defines the parameters of the module.
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3c0bc65cbea0cca3, []int{1}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

// QueryCrossChainPackageRequest is the request type for the Query/CrossChainPackage RPC method.
type QueryCrossChainPackageRequest struct {
	// channel id of the cross chain package
	ChannelId uint32 `protobuf:"varint,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	// sequence of the cross chain package
	Sequence uint64 `protobuf:"varint,2,opt,name=sequence,proto3" json:"sequence,omitempty"`
}

func (m *QueryCrossChainPackageRequest) Reset()         { *m = QueryCrossChainPackageRequest{} }
func (m *QueryCrossChainPackageRequest) String() string { return proto.CompactTextString(m) }
func (*QueryCrossChainPackageRequest) ProtoMessage()    {}
func (*QueryCrossChainPackageRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3c0bc65cbea0cca3, []int{2}
}
func (m *QueryCrossChainPackageRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryCrossChainPackageRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryCrossChainPackageRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryCrossChainPackageRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryCrossChainPackageRequest.Merge(m, src)
}
func (m *QueryCrossChainPackageRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryCrossChainPackageRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryCrossChainPackageRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryCrossChainPackageRequest proto.InternalMessageInfo

func (m *QueryCrossChainPackageRequest) GetChannelId() uint32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

func (m *QueryCrossChainPackageRequest) GetSequence() uint64 {
	if m != nil {
		return m.Sequence
	}
	return 0
}

// QueryCrossChainPackageResponse is the response type for the Query/CrossChainPackage RPC method.
type QueryCrossChainPackageResponse struct {
	// content of the cross chain package
	Package []byte `protobuf:"bytes,1,opt,name=package,proto3" json:"package,omitempty"`
}

func (m *QueryCrossChainPackageResponse) Reset()         { *m = QueryCrossChainPackageResponse{} }
func (m *QueryCrossChainPackageResponse) String() string { return proto.CompactTextString(m) }
func (*QueryCrossChainPackageResponse) ProtoMessage()    {}
func (*QueryCrossChainPackageResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3c0bc65cbea0cca3, []int{3}
}
func (m *QueryCrossChainPackageResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryCrossChainPackageResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryCrossChainPackageResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryCrossChainPackageResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryCrossChainPackageResponse.Merge(m, src)
}
func (m *QueryCrossChainPackageResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryCrossChainPackageResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryCrossChainPackageResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryCrossChainPackageResponse proto.InternalMessageInfo

func (m *QueryCrossChainPackageResponse) GetPackage() []byte {
	if m != nil {
		return m.Package
	}
	return nil
}

// QuerySendSequenceRequest is the request type for the Query/SendSequence RPC method.
type QuerySendSequenceRequest struct {
	// channel id of the cross chain package
	ChannelId uint32 `protobuf:"varint,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
}

func (m *QuerySendSequenceRequest) Reset()         { *m = QuerySendSequenceRequest{} }
func (m *QuerySendSequenceRequest) String() string { return proto.CompactTextString(m) }
func (*QuerySendSequenceRequest) ProtoMessage()    {}
func (*QuerySendSequenceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3c0bc65cbea0cca3, []int{4}
}
func (m *QuerySendSequenceRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySendSequenceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySendSequenceRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySendSequenceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySendSequenceRequest.Merge(m, src)
}
func (m *QuerySendSequenceRequest) XXX_Size() int {
	return m.Size()
}
func (m *QuerySendSequenceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySendSequenceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySendSequenceRequest proto.InternalMessageInfo

func (m *QuerySendSequenceRequest) GetChannelId() uint32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

// QuerySendSequenceResponse is the response type for the Query/SendSequence RPC method.
type QuerySendSequenceResponse struct {
	// sequence of the cross chain package
	Sequence uint64 `protobuf:"varint,1,opt,name=sequence,proto3" json:"sequence,omitempty"`
}

func (m *QuerySendSequenceResponse) Reset()         { *m = QuerySendSequenceResponse{} }
func (m *QuerySendSequenceResponse) String() string { return proto.CompactTextString(m) }
func (*QuerySendSequenceResponse) ProtoMessage()    {}
func (*QuerySendSequenceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3c0bc65cbea0cca3, []int{5}
}
func (m *QuerySendSequenceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySendSequenceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySendSequenceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySendSequenceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySendSequenceResponse.Merge(m, src)
}
func (m *QuerySendSequenceResponse) XXX_Size() int {
	return m.Size()
}
func (m *QuerySendSequenceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySendSequenceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySendSequenceResponse proto.InternalMessageInfo

func (m *QuerySendSequenceResponse) GetSequence() uint64 {
	if m != nil {
		return m.Sequence
	}
	return 0
}

// QuerySendSequenceRequest is the request type for the Query/ReceiveSequence RPC method.
type QueryReceiveSequenceRequest struct {
	// channel id of the cross chain package
	ChannelId uint32 `protobuf:"varint,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
}

func (m *QueryReceiveSequenceRequest) Reset()         { *m = QueryReceiveSequenceRequest{} }
func (m *QueryReceiveSequenceRequest) String() string { return proto.CompactTextString(m) }
func (*QueryReceiveSequenceRequest) ProtoMessage()    {}
func (*QueryReceiveSequenceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3c0bc65cbea0cca3, []int{6}
}
func (m *QueryReceiveSequenceRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryReceiveSequenceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryReceiveSequenceRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryReceiveSequenceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryReceiveSequenceRequest.Merge(m, src)
}
func (m *QueryReceiveSequenceRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryReceiveSequenceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryReceiveSequenceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryReceiveSequenceRequest proto.InternalMessageInfo

func (m *QueryReceiveSequenceRequest) GetChannelId() uint32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

// QuerySendSequenceResponse is the response type for the Query/ReceiveSequence RPC method.
type QueryReceiveSequenceResponse struct {
	// sequence of the cross chain package
	Sequence uint64 `protobuf:"varint,1,opt,name=sequence,proto3" json:"sequence,omitempty"`
}

func (m *QueryReceiveSequenceResponse) Reset()         { *m = QueryReceiveSequenceResponse{} }
func (m *QueryReceiveSequenceResponse) String() string { return proto.CompactTextString(m) }
func (*QueryReceiveSequenceResponse) ProtoMessage()    {}
func (*QueryReceiveSequenceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3c0bc65cbea0cca3, []int{7}
}
func (m *QueryReceiveSequenceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryReceiveSequenceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryReceiveSequenceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryReceiveSequenceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryReceiveSequenceResponse.Merge(m, src)
}
func (m *QueryReceiveSequenceResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryReceiveSequenceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryReceiveSequenceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryReceiveSequenceResponse proto.InternalMessageInfo

func (m *QueryReceiveSequenceResponse) GetSequence() uint64 {
	if m != nil {
		return m.Sequence
	}
	return 0
}

func init() {
	proto.RegisterType((*QueryParamsRequest)(nil), "cosmos.crosschain.v1.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "cosmos.crosschain.v1.QueryParamsResponse")
	proto.RegisterType((*QueryCrossChainPackageRequest)(nil), "cosmos.crosschain.v1.QueryCrossChainPackageRequest")
	proto.RegisterType((*QueryCrossChainPackageResponse)(nil), "cosmos.crosschain.v1.QueryCrossChainPackageResponse")
	proto.RegisterType((*QuerySendSequenceRequest)(nil), "cosmos.crosschain.v1.QuerySendSequenceRequest")
	proto.RegisterType((*QuerySendSequenceResponse)(nil), "cosmos.crosschain.v1.QuerySendSequenceResponse")
	proto.RegisterType((*QueryReceiveSequenceRequest)(nil), "cosmos.crosschain.v1.QueryReceiveSequenceRequest")
	proto.RegisterType((*QueryReceiveSequenceResponse)(nil), "cosmos.crosschain.v1.QueryReceiveSequenceResponse")
}

func init() { proto.RegisterFile("cosmos/crosschain/v1/query.proto", fileDescriptor_3c0bc65cbea0cca3) }

var fileDescriptor_3c0bc65cbea0cca3 = []byte{
	// 514 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x94, 0xb1, 0x6f, 0xd3, 0x40,
	0x14, 0xc6, 0x73, 0x55, 0x1b, 0xe0, 0x51, 0x84, 0x78, 0x64, 0x08, 0x26, 0x35, 0x91, 0xa1, 0x28,
	0x55, 0x85, 0x4f, 0x49, 0x91, 0x10, 0x11, 0x53, 0x3b, 0x75, 0x6b, 0xdd, 0xad, 0x4b, 0xe4, 0xda,
	0x27, 0xc7, 0x6a, 0x73, 0xe7, 0xfa, 0x9c, 0x88, 0xae, 0x30, 0xb2, 0x20, 0xb1, 0xf2, 0x07, 0xb0,
	0xf2, 0x5f, 0x74, 0xac, 0xc4, 0xc2, 0x84, 0x50, 0xc2, 0x1f, 0x82, 0x7c, 0xbe, 0x86, 0xd0, 0x5c,
	0xd2, 0x64, 0x4a, 0xee, 0xfc, 0x7d, 0xef, 0xfb, 0x49, 0xef, 0xb3, 0xa1, 0x1e, 0x08, 0xd9, 0x13,
	0x92, 0x06, 0xa9, 0x90, 0x32, 0xe8, 0xfa, 0x31, 0xa7, 0x83, 0x26, 0x3d, 0xef, 0xb3, 0xf4, 0xc2,
	0x4d, 0x52, 0x91, 0x09, 0xac, 0x14, 0x0a, 0xf7, 0x9f, 0xc2, 0x1d, 0x34, 0xad, 0x4a, 0x24, 0x22,
	0xa1, 0x04, 0x34, 0xff, 0x57, 0x68, 0xad, 0x5a, 0x24, 0x44, 0x74, 0xc6, 0xa8, 0x9f, 0xc4, 0xd4,
	0xe7, 0x5c, 0x64, 0x7e, 0x16, 0x0b, 0x2e, 0xf5, 0xd3, 0x4d, 0x63, 0xd6, 0xc4, 0x5c, 0x25, 0x73,
	0x2a, 0x80, 0x87, 0x79, 0xfe, 0x81, 0x9f, 0xfa, 0x3d, 0xe9, 0xb1, 0xf3, 0x3e, 0x93, 0x99, 0x73,
	0x08, 0x8f, 0xff, 0xbb, 0x95, 0x89, 0xe0, 0x92, 0x61, 0x1b, 0xca, 0x89, 0xba, 0xa9, 0x92, 0x3a,
	0x69, 0xdc, 0x6f, 0xd5, 0x5c, 0x13, 0xae, 0x5b, 0xb8, 0x76, 0x57, 0x2f, 0x7f, 0x3d, 0x2b, 0x79,
	0xda, 0xe1, 0x1c, 0xc3, 0x86, 0x1a, 0xb9, 0x97, 0x4b, 0xf7, 0x72, 0xe9, 0x81, 0x1f, 0x9c, 0xfa,
	0x11, 0xd3, 0x99, 0xb8, 0x01, 0x10, 0x74, 0x7d, 0xce, 0xd9, 0x59, 0x27, 0x0e, 0x55, 0xc0, 0x03,
	0xef, 0x9e, 0xbe, 0xd9, 0x0f, 0xd1, 0x82, 0xbb, 0x32, 0x57, 0xf2, 0x80, 0x55, 0x57, 0xea, 0xa4,
	0xb1, 0xea, 0x8d, 0xcf, 0x4e, 0x1b, 0xec, 0x59, 0xb3, 0x35, 0x79, 0x15, 0xee, 0x24, 0xc5, 0x95,
	0x9a, 0xbc, 0xee, 0x5d, 0x1f, 0x9d, 0xb7, 0x50, 0x55, 0xde, 0x23, 0xc6, 0xc3, 0x23, 0x3d, 0x70,
	0x31, 0x24, 0xe7, 0x0d, 0x3c, 0x31, 0x58, 0x75, 0xe2, 0x24, 0x2f, 0xb9, 0xc1, 0xfb, 0x0e, 0x9e,
	0x2a, 0xa3, 0xc7, 0x02, 0x16, 0x0f, 0xd8, 0x92, 0xb1, 0x6d, 0xa8, 0x99, 0xdd, 0xb7, 0x27, 0xb7,
	0x3e, 0xad, 0xc1, 0x9a, 0x32, 0xe3, 0x47, 0x02, 0xe5, 0x62, 0x51, 0xd8, 0x30, 0xaf, 0x71, 0xba,
	0x17, 0xd6, 0xd6, 0x02, 0xca, 0x82, 0xc2, 0x79, 0xf1, 0xe1, 0xc7, 0x9f, 0x2f, 0x2b, 0x36, 0xd6,
	0xa8, 0xb1, 0x88, 0x45, 0x2b, 0xf0, 0x3b, 0x81, 0x47, 0x53, 0x5b, 0xc3, 0x9d, 0x39, 0x31, 0xb3,
	0xfa, 0x63, 0xbd, 0x5e, 0xce, 0xa4, 0x31, 0x9b, 0x0a, 0x73, 0x1b, 0xb7, 0xe8, 0xec, 0xf7, 0xa5,
	0xa3, 0x8e, 0x1d, 0xdd, 0x18, 0xfc, 0x4a, 0x60, 0x7d, 0x72, 0xe5, 0xe8, 0xce, 0x49, 0x36, 0xd4,
	0xca, 0xa2, 0x0b, 0xeb, 0x35, 0xe4, 0xb6, 0x82, 0xdc, 0xc4, 0xe7, 0x66, 0x48, 0xc9, 0x78, 0xd8,
	0xb9, 0x5e, 0x31, 0x7e, 0x23, 0xf0, 0xf0, 0x46, 0x35, 0xb0, 0x39, 0x27, 0xd1, 0x5c, 0x42, 0xab,
	0xb5, 0x8c, 0x45, 0x73, 0xba, 0x8a, 0xb3, 0x81, 0x2f, 0xcd, 0x9c, 0x69, 0x61, 0x1b, 0xa3, 0xee,
	0xee, 0x5f, 0x0e, 0x6d, 0x72, 0x35, 0xb4, 0xc9, 0xef, 0xa1, 0x4d, 0x3e, 0x8f, 0xec, 0xd2, 0xd5,
	0xc8, 0x2e, 0xfd, 0x1c, 0xd9, 0xa5, 0x63, 0x1a, 0xc5, 0x59, 0xb7, 0x7f, 0xe2, 0x06, 0xa2, 0x37,
	0x9e, 0xa5, 0x7e, 0x5e, 0xc9, 0xf0, 0x94, 0xbe, 0x9f, 0x1c, 0x9c, 0x5d, 0x24, 0x4c, 0x9e, 0x94,
	0xd5, 0xe7, 0x6c, 0xe7, 0x6f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x45, 0x6c, 0xf9, 0x89, 0x63, 0x05,
	0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Params returns the total set of cross chain parameters.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// CrossChainPackage returns the specified cross chain package
	CrossChainPackage(ctx context.Context, in *QueryCrossChainPackageRequest, opts ...grpc.CallOption) (*QueryCrossChainPackageResponse, error)
	// SendSequence returns the send sequence of the channel
	SendSequence(ctx context.Context, in *QuerySendSequenceRequest, opts ...grpc.CallOption) (*QuerySendSequenceResponse, error)
	// ReceiveSequence returns the receive sequence of the channel
	ReceiveSequence(ctx context.Context, in *QueryReceiveSequenceRequest, opts ...grpc.CallOption) (*QueryReceiveSequenceResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/cosmos.crosschain.v1.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) CrossChainPackage(ctx context.Context, in *QueryCrossChainPackageRequest, opts ...grpc.CallOption) (*QueryCrossChainPackageResponse, error) {
	out := new(QueryCrossChainPackageResponse)
	err := c.cc.Invoke(ctx, "/cosmos.crosschain.v1.Query/CrossChainPackage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) SendSequence(ctx context.Context, in *QuerySendSequenceRequest, opts ...grpc.CallOption) (*QuerySendSequenceResponse, error) {
	out := new(QuerySendSequenceResponse)
	err := c.cc.Invoke(ctx, "/cosmos.crosschain.v1.Query/SendSequence", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ReceiveSequence(ctx context.Context, in *QueryReceiveSequenceRequest, opts ...grpc.CallOption) (*QueryReceiveSequenceResponse, error) {
	out := new(QueryReceiveSequenceResponse)
	err := c.cc.Invoke(ctx, "/cosmos.crosschain.v1.Query/ReceiveSequence", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Params returns the total set of cross chain parameters.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// CrossChainPackage returns the specified cross chain package
	CrossChainPackage(context.Context, *QueryCrossChainPackageRequest) (*QueryCrossChainPackageResponse, error)
	// SendSequence returns the send sequence of the channel
	SendSequence(context.Context, *QuerySendSequenceRequest) (*QuerySendSequenceResponse, error)
	// ReceiveSequence returns the receive sequence of the channel
	ReceiveSequence(context.Context, *QueryReceiveSequenceRequest) (*QueryReceiveSequenceResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) CrossChainPackage(ctx context.Context, req *QueryCrossChainPackageRequest) (*QueryCrossChainPackageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CrossChainPackage not implemented")
}
func (*UnimplementedQueryServer) SendSequence(ctx context.Context, req *QuerySendSequenceRequest) (*QuerySendSequenceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendSequence not implemented")
}
func (*UnimplementedQueryServer) ReceiveSequence(ctx context.Context, req *QueryReceiveSequenceRequest) (*QueryReceiveSequenceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReceiveSequence not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cosmos.crosschain.v1.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_CrossChainPackage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryCrossChainPackageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).CrossChainPackage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cosmos.crosschain.v1.Query/CrossChainPackage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).CrossChainPackage(ctx, req.(*QueryCrossChainPackageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_SendSequence_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuerySendSequenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).SendSequence(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cosmos.crosschain.v1.Query/SendSequence",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).SendSequence(ctx, req.(*QuerySendSequenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ReceiveSequence_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryReceiveSequenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ReceiveSequence(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cosmos.crosschain.v1.Query/ReceiveSequence",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ReceiveSequence(ctx, req.(*QueryReceiveSequenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "cosmos.crosschain.v1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "CrossChainPackage",
			Handler:    _Query_CrossChainPackage_Handler,
		},
		{
			MethodName: "SendSequence",
			Handler:    _Query_SendSequence_Handler,
		},
		{
			MethodName: "ReceiveSequence",
			Handler:    _Query_ReceiveSequence_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cosmos/crosschain/v1/query.proto",
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryCrossChainPackageRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryCrossChainPackageRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryCrossChainPackageRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Sequence != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Sequence))
		i--
		dAtA[i] = 0x10
	}
	if m.ChannelId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.ChannelId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryCrossChainPackageResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryCrossChainPackageResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryCrossChainPackageResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Package) > 0 {
		i -= len(m.Package)
		copy(dAtA[i:], m.Package)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Package)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QuerySendSequenceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySendSequenceRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySendSequenceRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ChannelId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.ChannelId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QuerySendSequenceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySendSequenceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySendSequenceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Sequence != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Sequence))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryReceiveSequenceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryReceiveSequenceRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryReceiveSequenceRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ChannelId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.ChannelId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryReceiveSequenceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryReceiveSequenceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryReceiveSequenceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Sequence != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Sequence))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryCrossChainPackageRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ChannelId != 0 {
		n += 1 + sovQuery(uint64(m.ChannelId))
	}
	if m.Sequence != 0 {
		n += 1 + sovQuery(uint64(m.Sequence))
	}
	return n
}

func (m *QueryCrossChainPackageResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Package)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QuerySendSequenceRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ChannelId != 0 {
		n += 1 + sovQuery(uint64(m.ChannelId))
	}
	return n
}

func (m *QuerySendSequenceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Sequence != 0 {
		n += 1 + sovQuery(uint64(m.Sequence))
	}
	return n
}

func (m *QueryReceiveSequenceRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ChannelId != 0 {
		n += 1 + sovQuery(uint64(m.ChannelId))
	}
	return n
}

func (m *QueryReceiveSequenceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Sequence != 0 {
		n += 1 + sovQuery(uint64(m.Sequence))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryCrossChainPackageRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryCrossChainPackageRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryCrossChainPackageRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sequence", wireType)
			}
			m.Sequence = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sequence |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryCrossChainPackageResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryCrossChainPackageResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryCrossChainPackageResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Package", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Package = append(m.Package[:0], dAtA[iNdEx:postIndex]...)
			if m.Package == nil {
				m.Package = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySendSequenceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySendSequenceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySendSequenceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySendSequenceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySendSequenceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySendSequenceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sequence", wireType)
			}
			m.Sequence = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sequence |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryReceiveSequenceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryReceiveSequenceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryReceiveSequenceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryReceiveSequenceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryReceiveSequenceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryReceiveSequenceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sequence", wireType)
			}
			m.Sequence = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sequence |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
