// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: cosmos/oracle/v1/event.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// EventPackageClaim is emitted when a cross chain package is processed
type EventPackageClaim struct {
	SrcChainId      uint32 `protobuf:"varint,1,opt,name=src_chain_id,json=srcChainId,proto3" json:"src_chain_id,omitempty"`
	DestChainId     uint32 `protobuf:"varint,2,opt,name=dest_chain_id,json=destChainId,proto3" json:"dest_chain_id,omitempty"`
	ChannelId       uint32 `protobuf:"varint,3,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	PackageType     uint32 `protobuf:"varint,4,opt,name=package_type,json=packageType,proto3" json:"package_type,omitempty"`
	ReceiveSequence uint64 `protobuf:"varint,5,opt,name=receive_sequence,json=receiveSequence,proto3" json:"receive_sequence,omitempty"`
	SendSequence    int64  `protobuf:"varint,6,opt,name=send_sequence,json=sendSequence,proto3" json:"send_sequence,omitempty"`
	Crash           bool   `protobuf:"varint,7,opt,name=crash,proto3" json:"crash,omitempty"`
	ErrorMsg        string `protobuf:"bytes,8,opt,name=error_msg,json=errorMsg,proto3" json:"error_msg,omitempty"`
	RelayFee        string `protobuf:"bytes,9,opt,name=relay_fee,json=relayFee,proto3" json:"relay_fee,omitempty"`
}

func (m *EventPackageClaim) Reset()         { *m = EventPackageClaim{} }
func (m *EventPackageClaim) String() string { return proto.CompactTextString(m) }
func (*EventPackageClaim) ProtoMessage()    {}
func (*EventPackageClaim) Descriptor() ([]byte, []int) {
	return fileDescriptor_3e254cedc4112fb0, []int{0}
}
func (m *EventPackageClaim) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventPackageClaim) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventPackageClaim.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventPackageClaim) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventPackageClaim.Merge(m, src)
}
func (m *EventPackageClaim) XXX_Size() int {
	return m.Size()
}
func (m *EventPackageClaim) XXX_DiscardUnknown() {
	xxx_messageInfo_EventPackageClaim.DiscardUnknown(m)
}

var xxx_messageInfo_EventPackageClaim proto.InternalMessageInfo

func (m *EventPackageClaim) GetSrcChainId() uint32 {
	if m != nil {
		return m.SrcChainId
	}
	return 0
}

func (m *EventPackageClaim) GetDestChainId() uint32 {
	if m != nil {
		return m.DestChainId
	}
	return 0
}

func (m *EventPackageClaim) GetChannelId() uint32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

func (m *EventPackageClaim) GetPackageType() uint32 {
	if m != nil {
		return m.PackageType
	}
	return 0
}

func (m *EventPackageClaim) GetReceiveSequence() uint64 {
	if m != nil {
		return m.ReceiveSequence
	}
	return 0
}

func (m *EventPackageClaim) GetSendSequence() int64 {
	if m != nil {
		return m.SendSequence
	}
	return 0
}

func (m *EventPackageClaim) GetCrash() bool {
	if m != nil {
		return m.Crash
	}
	return false
}

func (m *EventPackageClaim) GetErrorMsg() string {
	if m != nil {
		return m.ErrorMsg
	}
	return ""
}

func (m *EventPackageClaim) GetRelayFee() string {
	if m != nil {
		return m.RelayFee
	}
	return ""
}

func init() {
	proto.RegisterType((*EventPackageClaim)(nil), "cosmos.oracle.v1.EventPackageClaim")
}

func init() { proto.RegisterFile("cosmos/oracle/v1/event.proto", fileDescriptor_3e254cedc4112fb0) }

var fileDescriptor_3e254cedc4112fb0 = []byte{
	// 338 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x44, 0x91, 0xcf, 0x4a, 0xeb, 0x40,
	0x14, 0xc6, 0x3b, 0xfd, 0x77, 0x9b, 0xb9, 0x2d, 0xb7, 0x77, 0xb8, 0x8b, 0xc0, 0xd5, 0x10, 0xeb,
	0x26, 0x22, 0x26, 0x14, 0xdf, 0xc0, 0x52, 0xa1, 0x0b, 0x41, 0xa2, 0x2b, 0x37, 0x61, 0x3a, 0x39,
	0x26, 0xa1, 0x49, 0x26, 0xce, 0xa4, 0xc1, 0xbe, 0x85, 0xef, 0xe3, 0x0b, 0xb8, 0xec, 0xd2, 0xa5,
	0xb4, 0x2f, 0x22, 0x93, 0x49, 0xed, 0x6a, 0x98, 0xdf, 0xf7, 0xe3, 0x1c, 0x0e, 0x1f, 0x3e, 0x61,
	0x5c, 0x66, 0x5c, 0x7a, 0x5c, 0x50, 0x96, 0x82, 0x57, 0x4d, 0x3d, 0xa8, 0x20, 0x2f, 0xdd, 0x42,
	0xf0, 0x92, 0x93, 0xb1, 0x4e, 0x5d, 0x9d, 0xba, 0xd5, 0x74, 0xf2, 0xde, 0xc6, 0x7f, 0xe7, 0xca,
	0xb8, 0xa7, 0x6c, 0x45, 0x23, 0x98, 0xa5, 0x34, 0xc9, 0x88, 0x8d, 0x87, 0x52, 0xb0, 0x80, 0xc5,
	0x34, 0xc9, 0x83, 0x24, 0x34, 0x91, 0x8d, 0x9c, 0x91, 0x8f, 0xa5, 0x60, 0x33, 0x85, 0x16, 0x21,
	0x99, 0xe0, 0x51, 0x08, 0xb2, 0x3c, 0x2a, 0xed, 0x5a, 0xf9, 0xad, 0xe0, 0xc1, 0x39, 0xc5, 0x98,
	0xc5, 0x34, 0xcf, 0x21, 0x55, 0x42, 0xa7, 0x16, 0x8c, 0x86, 0x2c, 0x42, 0x72, 0x86, 0x87, 0x85,
	0x5e, 0x1a, 0x94, 0x9b, 0x02, 0xcc, 0xae, 0x9e, 0xd0, 0xb0, 0xc7, 0x4d, 0x01, 0xe4, 0x02, 0x8f,
	0x05, 0x30, 0x48, 0x2a, 0x08, 0x24, 0xbc, 0xac, 0x21, 0x67, 0x60, 0xf6, 0x6c, 0xe4, 0x74, 0xfd,
	0x3f, 0x0d, 0x7f, 0x68, 0x30, 0x39, 0xc7, 0x23, 0x09, 0x79, 0x78, 0xf4, 0xfa, 0x36, 0x72, 0x3a,
	0xfe, 0x50, 0xc1, 0x1f, 0xe9, 0x1f, 0xee, 0x31, 0x41, 0x65, 0x6c, 0xfe, 0xb2, 0x91, 0x33, 0xf0,
	0xf5, 0x87, 0xfc, 0xc7, 0x06, 0x08, 0xc1, 0x45, 0x90, 0xc9, 0xc8, 0x1c, 0xd8, 0xc8, 0x31, 0xfc,
	0x41, 0x0d, 0xee, 0x64, 0xa4, 0x42, 0x01, 0x29, 0xdd, 0x04, 0xcf, 0x00, 0xa6, 0xa1, 0xc3, 0x1a,
	0xdc, 0x02, 0xdc, 0xcc, 0x3f, 0x76, 0x16, 0xda, 0xee, 0x2c, 0xf4, 0xb5, 0xb3, 0xd0, 0xdb, 0xde,
	0x6a, 0x6d, 0xf7, 0x56, 0xeb, 0x73, 0x6f, 0xb5, 0x9e, 0x2e, 0xa3, 0xa4, 0x8c, 0xd7, 0x4b, 0x97,
	0xf1, 0xcc, 0x6b, 0x2a, 0xd1, 0xcf, 0x95, 0x0c, 0x57, 0xde, 0xeb, 0xa1, 0x1f, 0x75, 0xb8, 0x5c,
	0xf6, 0xeb, 0x76, 0xae, 0xbf, 0x03, 0x00, 0x00, 0xff, 0xff, 0x44, 0xa0, 0x08, 0xcc, 0xbd, 0x01,
	0x00, 0x00,
}

func (m *EventPackageClaim) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventPackageClaim) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventPackageClaim) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RelayFee) > 0 {
		i -= len(m.RelayFee)
		copy(dAtA[i:], m.RelayFee)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.RelayFee)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.ErrorMsg) > 0 {
		i -= len(m.ErrorMsg)
		copy(dAtA[i:], m.ErrorMsg)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.ErrorMsg)))
		i--
		dAtA[i] = 0x42
	}
	if m.Crash {
		i--
		if m.Crash {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x38
	}
	if m.SendSequence != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.SendSequence))
		i--
		dAtA[i] = 0x30
	}
	if m.ReceiveSequence != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.ReceiveSequence))
		i--
		dAtA[i] = 0x28
	}
	if m.PackageType != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.PackageType))
		i--
		dAtA[i] = 0x20
	}
	if m.ChannelId != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.ChannelId))
		i--
		dAtA[i] = 0x18
	}
	if m.DestChainId != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.DestChainId))
		i--
		dAtA[i] = 0x10
	}
	if m.SrcChainId != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.SrcChainId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintEvent(dAtA []byte, offset int, v uint64) int {
	offset -= sovEvent(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *EventPackageClaim) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SrcChainId != 0 {
		n += 1 + sovEvent(uint64(m.SrcChainId))
	}
	if m.DestChainId != 0 {
		n += 1 + sovEvent(uint64(m.DestChainId))
	}
	if m.ChannelId != 0 {
		n += 1 + sovEvent(uint64(m.ChannelId))
	}
	if m.PackageType != 0 {
		n += 1 + sovEvent(uint64(m.PackageType))
	}
	if m.ReceiveSequence != 0 {
		n += 1 + sovEvent(uint64(m.ReceiveSequence))
	}
	if m.SendSequence != 0 {
		n += 1 + sovEvent(uint64(m.SendSequence))
	}
	if m.Crash {
		n += 2
	}
	l = len(m.ErrorMsg)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.RelayFee)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	return n
}

func sovEvent(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozEvent(x uint64) (n int) {
	return sovEvent(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *EventPackageClaim) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventPackageClaim: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventPackageClaim: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SrcChainId", wireType)
			}
			m.SrcChainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SrcChainId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestChainId", wireType)
			}
			m.DestChainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DestChainId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PackageType", wireType)
			}
			m.PackageType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PackageType |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReceiveSequence", wireType)
			}
			m.ReceiveSequence = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReceiveSequence |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SendSequence", wireType)
			}
			m.SendSequence = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SendSequence |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Crash", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Crash = bool(v != 0)
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorMsg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ErrorMsg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RelayFee", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RelayFee = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEvent(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthEvent
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupEvent
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthEvent
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthEvent        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEvent          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupEvent = fmt.Errorf("proto: unexpected end of group")
)
