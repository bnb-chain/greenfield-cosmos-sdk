// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/cosmos/cosmos-sdk/x/oracle/types (interfaces: StakingKeeper,CrossChainKeeper,BankKeeper)

// Package types is a generated GoMock package.
package types

import (
	big "math/big"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"

	types "github.com/cosmos/cosmos-sdk/types"
	types0 "github.com/cosmos/cosmos-sdk/x/staking/types"
)

// MockStakingKeeper is a mock of StakingKeeper interface
type MockStakingKeeper struct {
	ctrl     *gomock.Controller
	recorder *MockStakingKeeperMockRecorder
}

// MockStakingKeeperMockRecorder is the mock recorder for MockStakingKeeper
type MockStakingKeeperMockRecorder struct {
	mock *MockStakingKeeper
}

// NewMockStakingKeeper creates a new mock instance
func NewMockStakingKeeper(ctrl *gomock.Controller) *MockStakingKeeper {
	mock := &MockStakingKeeper{ctrl: ctrl}
	mock.recorder = &MockStakingKeeperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockStakingKeeper) EXPECT() *MockStakingKeeperMockRecorder {
	return m.recorder
}

// BondDenom mocks base method
func (m *MockStakingKeeper) BondDenom(arg0 types.Context) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BondDenom", arg0)
	ret0, _ := ret[0].(string)
	return ret0
}

// BondDenom indicates an expected call of BondDenom
func (mr *MockStakingKeeperMockRecorder) BondDenom(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BondDenom", reflect.TypeOf((*MockStakingKeeper)(nil).BondDenom), arg0)
}

// GetHistoricalInfo mocks base method
func (m *MockStakingKeeper) GetHistoricalInfo(arg0 types.Context, arg1 int64) (types0.HistoricalInfo, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHistoricalInfo", arg0, arg1)
	ret0, _ := ret[0].(types0.HistoricalInfo)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetHistoricalInfo indicates an expected call of GetHistoricalInfo
func (mr *MockStakingKeeperMockRecorder) GetHistoricalInfo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHistoricalInfo", reflect.TypeOf((*MockStakingKeeper)(nil).GetHistoricalInfo), arg0, arg1)
}

// GetLastValidators mocks base method
func (m *MockStakingKeeper) GetLastValidators(arg0 types.Context) []types0.Validator {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLastValidators", arg0)
	ret0, _ := ret[0].([]types0.Validator)
	return ret0
}

// GetLastValidators indicates an expected call of GetLastValidators
func (mr *MockStakingKeeperMockRecorder) GetLastValidators(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLastValidators", reflect.TypeOf((*MockStakingKeeper)(nil).GetLastValidators), arg0)
}

// MockCrossChainKeeper is a mock of CrossChainKeeper interface
type MockCrossChainKeeper struct {
	ctrl     *gomock.Controller
	recorder *MockCrossChainKeeperMockRecorder
}

// MockCrossChainKeeperMockRecorder is the mock recorder for MockCrossChainKeeper
type MockCrossChainKeeperMockRecorder struct {
	mock *MockCrossChainKeeper
}

// NewMockCrossChainKeeper creates a new mock instance
func NewMockCrossChainKeeper(ctrl *gomock.Controller) *MockCrossChainKeeper {
	mock := &MockCrossChainKeeper{ctrl: ctrl}
	mock.recorder = &MockCrossChainKeeperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCrossChainKeeper) EXPECT() *MockCrossChainKeeperMockRecorder {
	return m.recorder
}

// CreateRawIBCPackageWithFee mocks base method
func (m *MockCrossChainKeeper) CreateRawIBCPackageWithFee(arg0 types.Context, arg1 types.ChannelID, arg2 types.CrossChainPackageType, arg3 []byte, arg4, arg5 *big.Int) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRawIBCPackageWithFee", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRawIBCPackageWithFee indicates an expected call of CreateRawIBCPackageWithFee
func (mr *MockCrossChainKeeperMockRecorder) CreateRawIBCPackageWithFee(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRawIBCPackageWithFee", reflect.TypeOf((*MockCrossChainKeeper)(nil).CreateRawIBCPackageWithFee), arg0, arg1, arg2, arg3, arg4, arg5)
}

// GetCrossChainApp mocks base method
func (m *MockCrossChainKeeper) GetCrossChainApp(arg0 types.ChannelID) types.CrossChainApplication {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCrossChainApp", arg0)
	ret0, _ := ret[0].(types.CrossChainApplication)
	return ret0
}

// GetCrossChainApp indicates an expected call of GetCrossChainApp
func (mr *MockCrossChainKeeperMockRecorder) GetCrossChainApp(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCrossChainApp", reflect.TypeOf((*MockCrossChainKeeper)(nil).GetCrossChainApp), arg0)
}

// GetReceiveSequence mocks base method
func (m *MockCrossChainKeeper) GetReceiveSequence(arg0 types.Context, arg1 types.ChannelID) uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReceiveSequence", arg0, arg1)
	ret0, _ := ret[0].(uint64)
	return ret0
}

// GetReceiveSequence indicates an expected call of GetReceiveSequence
func (mr *MockCrossChainKeeperMockRecorder) GetReceiveSequence(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReceiveSequence", reflect.TypeOf((*MockCrossChainKeeper)(nil).GetReceiveSequence), arg0, arg1)
}

// GetSrcChainID mocks base method
func (m *MockCrossChainKeeper) GetSrcChainID() types.ChainID {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSrcChainID")
	ret0, _ := ret[0].(types.ChainID)
	return ret0
}

// GetSrcChainID indicates an expected call of GetSrcChainID
func (mr *MockCrossChainKeeperMockRecorder) GetSrcChainID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSrcChainID", reflect.TypeOf((*MockCrossChainKeeper)(nil).GetSrcChainID))
}

// IncrReceiveSequence mocks base method
func (m *MockCrossChainKeeper) IncrReceiveSequence(arg0 types.Context, arg1 types.ChannelID) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "IncrReceiveSequence", arg0, arg1)
}

// IncrReceiveSequence indicates an expected call of IncrReceiveSequence
func (mr *MockCrossChainKeeperMockRecorder) IncrReceiveSequence(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncrReceiveSequence", reflect.TypeOf((*MockCrossChainKeeper)(nil).IncrReceiveSequence), arg0, arg1)
}

// IsDestChainSupported mocks base method
func (m *MockCrossChainKeeper) IsDestChainSupported(arg0 types.ChainID) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsDestChainSupported", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsDestChainSupported indicates an expected call of IsDestChainSupported
func (mr *MockCrossChainKeeperMockRecorder) IsDestChainSupported(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsDestChainSupported", reflect.TypeOf((*MockCrossChainKeeper)(nil).IsDestChainSupported), arg0)
}

// MockBankKeeper is a mock of BankKeeper interface
type MockBankKeeper struct {
	ctrl     *gomock.Controller
	recorder *MockBankKeeperMockRecorder
}

// MockBankKeeperMockRecorder is the mock recorder for MockBankKeeper
type MockBankKeeperMockRecorder struct {
	mock *MockBankKeeper
}

// NewMockBankKeeper creates a new mock instance
func NewMockBankKeeper(ctrl *gomock.Controller) *MockBankKeeper {
	mock := &MockBankKeeper{ctrl: ctrl}
	mock.recorder = &MockBankKeeperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockBankKeeper) EXPECT() *MockBankKeeperMockRecorder {
	return m.recorder
}

// SendCoinsFromModuleToAccount mocks base method
func (m *MockBankKeeper) SendCoinsFromModuleToAccount(arg0 types.Context, arg1 string, arg2 types.AccAddress, arg3 types.Coins) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendCoinsFromModuleToAccount", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendCoinsFromModuleToAccount indicates an expected call of SendCoinsFromModuleToAccount
func (mr *MockBankKeeperMockRecorder) SendCoinsFromModuleToAccount(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendCoinsFromModuleToAccount", reflect.TypeOf((*MockBankKeeper)(nil).SendCoinsFromModuleToAccount), arg0, arg1, arg2, arg3)
}
