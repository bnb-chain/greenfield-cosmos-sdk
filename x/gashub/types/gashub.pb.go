// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: cosmos/gashub/v1alpha1/gashub.proto

package types

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Params defines the parameters for the gashub module.
type Params struct {
	MaxTxSize       uint64          `protobuf:"varint,1,opt,name=max_tx_size,json=maxTxSize,proto3" json:"max_tx_size,omitempty"`
	MinGasPerByte   uint64          `protobuf:"varint,2,opt,name=min_gas_per_byte,json=minGasPerByte,proto3" json:"min_gas_per_byte,omitempty"`
	MsgGasParamsSet []*MsgGasParams `protobuf:"bytes,3,rep,name=msg_gas_params_set,json=msgGasParamsSet,proto3" json:"msg_gas_params_set,omitempty"`
}

func (m *Params) Reset()      { *m = Params{} }
func (*Params) ProtoMessage() {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_f79bf23b48853a4a, []int{0}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

func (m *Params) GetMaxTxSize() uint64 {
	if m != nil {
		return m.MaxTxSize
	}
	return 0
}

func (m *Params) GetMinGasPerByte() uint64 {
	if m != nil {
		return m.MinGasPerByte
	}
	return 0
}

func (m *Params) GetMsgGasParamsSet() []*MsgGasParams {
	if m != nil {
		return m.MsgGasParamsSet
	}
	return nil
}

// MsgGasParams is a
type MsgGasParams struct {
	Msg_type_url string   `protobuf:"bytes,1,opt,name=msg_type_url,json=msgTypeUrl,proto3" json:"msg_type_url,omitempty"`
	Params       []uint64 `protobuf:"varint,2,rep,packed,name=params,proto3" json:"params,omitempty"`
}

func (m *MsgGasParams) Reset()         { *m = MsgGasParams{} }
func (m *MsgGasParams) String() string { return proto.CompactTextString(m) }
func (*MsgGasParams) ProtoMessage()    {}
func (*MsgGasParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_f79bf23b48853a4a, []int{1}
}
func (m *MsgGasParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgGasParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgGasParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgGasParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgGasParams.Merge(m, src)
}
func (m *MsgGasParams) XXX_Size() int {
	return m.Size()
}
func (m *MsgGasParams) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgGasParams.DiscardUnknown(m)
}

var xxx_messageInfo_MsgGasParams proto.InternalMessageInfo

func (m *MsgGasParams) GetMsg_type_url() string {
	if m != nil {
		return m.Msg_type_url
	}
	return ""
}

func (m *MsgGasParams) GetParams() []uint64 {
	if m != nil {
		return m.Params
	}
	return nil
}

func init() {
	proto.RegisterType((*Params)(nil), "cosmos.gashub.v1alpha1.Params")
	proto.RegisterType((*MsgGasParams)(nil), "cosmos.gashub.v1alpha1.MsgGasParams")
}

func init() {
	proto.RegisterFile("cosmos/gashub/v1alpha1/gashub.proto", fileDescriptor_f79bf23b48853a4a)
}

var fileDescriptor_f79bf23b48853a4a = []byte{
	// 364 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x91, 0xc1, 0x6b, 0xfa, 0x30,
	0x14, 0xc7, 0x5b, 0x15, 0xf9, 0x19, 0x15, 0xfd, 0x75, 0x63, 0x94, 0x1d, 0x5a, 0x71, 0x3b, 0x08,
	0xc3, 0x16, 0xdd, 0xcd, 0x63, 0x61, 0xec, 0x24, 0x48, 0x75, 0x97, 0x5d, 0x4a, 0x74, 0x59, 0x2c,
	0x6b, 0x4c, 0x69, 0xe2, 0x68, 0xfd, 0x2b, 0x76, 0xdc, 0xd1, 0x3f, 0x67, 0x47, 0x8f, 0x3b, 0x95,
	0x11, 0x19, 0xec, 0xcf, 0x18, 0x69, 0xeb, 0x70, 0xb0, 0x53, 0xde, 0xfb, 0xe6, 0xf3, 0xf2, 0xde,
	0xcb, 0x17, 0x5c, 0x2c, 0x28, 0x23, 0x94, 0xd9, 0x18, 0xb2, 0xe5, 0x7a, 0x6e, 0x3f, 0x0f, 0x60,
	0x10, 0x2e, 0xe1, 0xa0, 0xc8, 0xad, 0x30, 0xa2, 0x9c, 0x6a, 0x67, 0x39, 0x64, 0x15, 0xe2, 0x01,
	0x3a, 0x3f, 0xc5, 0x14, 0xd3, 0x0c, 0xb1, 0x65, 0x94, 0xd3, 0xdd, 0x4f, 0x15, 0x54, 0x27, 0x30,
	0x82, 0x84, 0x69, 0x7d, 0x50, 0x27, 0x30, 0xf6, 0x78, 0xec, 0x31, 0x7f, 0x83, 0x74, 0xb5, 0xa3,
	0xf6, 0x2a, 0x4e, 0x53, 0xa4, 0x66, 0x6d, 0x0c, 0xe3, 0x59, 0x3c, 0xf5, 0x37, 0xc8, 0xad, 0x91,
	0x43, 0xa8, 0x8d, 0x40, 0x9b, 0xf8, 0x2b, 0x0f, 0x43, 0xe6, 0x85, 0x28, 0xf2, 0xe6, 0x09, 0x47,
	0x7a, 0x29, 0xab, 0xf9, 0x2f, 0x52, 0xb3, 0x39, 0xf6, 0x57, 0xb7, 0x90, 0x4d, 0x50, 0xe4, 0x24,
	0x1c, 0xb9, 0x4d, 0x72, 0x9c, 0x6a, 0x8f, 0x40, 0x23, 0x0c, 0xe7, 0xb5, 0x59, 0x73, 0x8f, 0x21,
	0xae, 0x97, 0x3b, 0xe5, 0x5e, 0x7d, 0x78, 0x69, 0xfd, 0xbd, 0x80, 0x35, 0x66, 0x58, 0x3e, 0x91,
	0xf1, 0xce, 0x89, 0x48, 0xcd, 0xd6, 0xb1, 0x32, 0x45, 0xdc, 0x6d, 0x91, 0xdf, 0xc2, 0xe8, 0xdf,
	0xeb, 0xd6, 0x54, 0xbe, 0xb6, 0xa6, 0xda, 0x0d, 0x40, 0xe3, 0x98, 0xd6, 0x86, 0xa0, 0x21, 0x27,
	0xe0, 0x49, 0x88, 0xbc, 0x75, 0x14, 0x64, 0xdb, 0xd6, 0x9c, 0xb6, 0x48, 0x4d, 0xc9, 0xfd, 0xe8,
	0x2e, 0x20, 0x0c, 0xcf, 0x92, 0x10, 0xdd, 0x45, 0x81, 0xd6, 0x05, 0xd5, 0x7c, 0x5a, 0xbd, 0xd4,
	0x29, 0xf7, 0x2a, 0x0e, 0x10, 0xa9, 0x59, 0x7c, 0x9e, 0x5b, 0xdc, 0x8c, 0x2a, 0xb2, 0x9b, 0x73,
	0xf3, 0x26, 0x0c, 0x75, 0x27, 0x0c, 0xf5, 0x43, 0x18, 0xea, 0xcb, 0xde, 0x50, 0x76, 0x7b, 0x43,
	0x79, 0xdf, 0x1b, 0xca, 0xfd, 0x15, 0xf6, 0xb9, 0xdc, 0x6a, 0x41, 0x89, 0x5d, 0xb8, 0x99, 0x1f,
	0x7d, 0xf6, 0xf0, 0x64, 0xc7, 0x07, 0x6b, 0x65, 0x7f, 0x36, 0xaf, 0x66, 0x1e, 0x5d, 0x7f, 0x07,
	0x00, 0x00, 0xff, 0xff, 0x4f, 0xce, 0x43, 0x21, 0xf8, 0x01, 0x00, 0x00,
}

func (this *Params) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Params)
	if !ok {
		that2, ok := that.(Params)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.MaxTxSize != that1.MaxTxSize {
		return false
	}
	if this.MinGasPerByte != that1.MinGasPerByte {
		return false
	}
	if len(this.MsgGasParamsSet) != len(that1.MsgGasParamsSet) {
		return false
	}
	for i := range this.MsgGasParamsSet {
		if !this.MsgGasParamsSet[i].Equal(that1.MsgGasParamsSet[i]) {
			return false
		}
	}
	return true
}
func (this *MsgGasParams) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MsgGasParams)
	if !ok {
		that2, ok := that.(MsgGasParams)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Msg_type_url != that1.Msg_type_url {
		return false
	}
	if len(this.Params) != len(that1.Params) {
		return false
	}
	for i := range this.Params {
		if this.Params[i] != that1.Params[i] {
			return false
		}
	}
	return true
}
func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.MsgGasParamsSet) > 0 {
		for iNdEx := len(m.MsgGasParamsSet) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.MsgGasParamsSet[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGashub(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.MinGasPerByte != 0 {
		i = encodeVarintGashub(dAtA, i, uint64(m.MinGasPerByte))
		i--
		dAtA[i] = 0x10
	}
	if m.MaxTxSize != 0 {
		i = encodeVarintGashub(dAtA, i, uint64(m.MaxTxSize))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgGasParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgGasParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgGasParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Params) > 0 {
		dAtA2 := make([]byte, len(m.Params)*10)
		var j1 int
		for _, num := range m.Params {
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		i -= j1
		copy(dAtA[i:], dAtA2[:j1])
		i = encodeVarintGashub(dAtA, i, uint64(j1))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Msg_type_url) > 0 {
		i -= len(m.Msg_type_url)
		copy(dAtA[i:], m.Msg_type_url)
		i = encodeVarintGashub(dAtA, i, uint64(len(m.Msg_type_url)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintGashub(dAtA []byte, offset int, v uint64) int {
	offset -= sovGashub(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MaxTxSize != 0 {
		n += 1 + sovGashub(uint64(m.MaxTxSize))
	}
	if m.MinGasPerByte != 0 {
		n += 1 + sovGashub(uint64(m.MinGasPerByte))
	}
	if len(m.MsgGasParamsSet) > 0 {
		for _, e := range m.MsgGasParamsSet {
			l = e.Size()
			n += 1 + l + sovGashub(uint64(l))
		}
	}
	return n
}

func (m *MsgGasParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Msg_type_url)
	if l > 0 {
		n += 1 + l + sovGashub(uint64(l))
	}
	if len(m.Params) > 0 {
		l = 0
		for _, e := range m.Params {
			l += sovGashub(uint64(e))
		}
		n += 1 + sovGashub(uint64(l)) + l
	}
	return n
}

func sovGashub(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozGashub(x uint64) (n int) {
	return sovGashub(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGashub
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxTxSize", wireType)
			}
			m.MaxTxSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGashub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxTxSize |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinGasPerByte", wireType)
			}
			m.MinGasPerByte = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGashub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinGasPerByte |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgGasParamsSet", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGashub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGashub
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGashub
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MsgGasParamsSet = append(m.MsgGasParamsSet, &MsgGasParams{})
			if err := m.MsgGasParamsSet[len(m.MsgGasParamsSet)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGashub(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGashub
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgGasParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGashub
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgGasParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgGasParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg_type_url", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGashub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGashub
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGashub
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg_type_url = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGashub
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Params = append(m.Params, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGashub
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthGashub
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthGashub
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Params) == 0 {
					m.Params = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGashub
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Params = append(m.Params, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGashub(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGashub
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGashub(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGashub
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGashub
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGashub
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthGashub
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupGashub
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthGashub
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthGashub        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGashub          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupGashub = fmt.Errorf("proto: unexpected end of group")
)
