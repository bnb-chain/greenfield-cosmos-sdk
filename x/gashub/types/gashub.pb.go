// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: cosmos/gashub/v1alpha1/gashub.proto

package types

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// GasType defines the msg's gas type
type GasType int32

const (
	// GAS_TYPE_UNSPECIFIED defines the unspecified type gas which is not allowed
	GasType_GAS_TYPE_UNSPECIFIED GasType = 0
	// GAS_TYPE_FIXED defines the fixed type gas
	GasType_GAS_TYPE_FIXED GasType = 1
	// GAS_TYPE_DYNAMIC defines the dynamic type gas
	GasType_GAS_TYPE_DYNAMIC GasType = 2
)

var GasType_name = map[int32]string{
	0: "GAS_TYPE_UNSPECIFIED",
	1: "GAS_TYPE_FIXED",
	2: "GAS_TYPE_DYNAMIC",
}

var GasType_value = map[string]int32{
	"GAS_TYPE_UNSPECIFIED": 0,
	"GAS_TYPE_FIXED":       1,
	"GAS_TYPE_DYNAMIC":     2,
}

func (x GasType) String() string {
	return proto.EnumName(GasType_name, int32(x))
}

func (GasType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_f79bf23b48853a4a, []int{0}
}

// Params defines the parameters for the gashub module.
type Params struct {
	MaxTxSize       uint64          `protobuf:"varint,1,opt,name=max_tx_size,json=maxTxSize,proto3" json:"max_tx_size,omitempty"`
	MinGasPerByte   uint64          `protobuf:"varint,2,opt,name=min_gas_per_byte,json=minGasPerByte,proto3" json:"min_gas_per_byte,omitempty"`
	MsgGasParamsSet []*MsgGasParams `protobuf:"bytes,3,rep,name=msg_gas_params_set,json=msgGasParamsSet,proto3" json:"msg_gas_params_set,omitempty"`
}

func (m *Params) Reset()      { *m = Params{} }
func (*Params) ProtoMessage() {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_f79bf23b48853a4a, []int{0}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

func (m *Params) GetMaxTxSize() uint64 {
	if m != nil {
		return m.MaxTxSize
	}
	return 0
}

func (m *Params) GetMinGasPerByte() uint64 {
	if m != nil {
		return m.MinGasPerByte
	}
	return 0
}

func (m *Params) GetMsgGasParamsSet() []*MsgGasParams {
	if m != nil {
		return m.MsgGasParamsSet
	}
	return nil
}

// MsgGasParams defines gas for a msg type
type MsgGasParams struct {
	MsgTypeUrl string  `protobuf:"bytes,1,opt,name=msg_type_url,json=msgTypeUrl,proto3" json:"msg_type_url,omitempty"`
	GasType    GasType `protobuf:"varint,2,opt,name=gas_type,json=gasType,proto3,enum=cosmos.gashub.v1alpha1.GasType" json:"gas_type,omitempty"`
	// gas_params is the oneof that represents either fixed_gas_params or dynamic_gas_params
	//
	// Types that are valid to be assigned to GasParams:
	//	*MsgGasParams_FixedType
	//	*MsgGasParams_DynamicType
	GasParams isMsgGasParams_GasParams `protobuf_oneof:"gas_params"`
}

func (m *MsgGasParams) Reset()         { *m = MsgGasParams{} }
func (m *MsgGasParams) String() string { return proto.CompactTextString(m) }
func (*MsgGasParams) ProtoMessage()    {}
func (*MsgGasParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_f79bf23b48853a4a, []int{1}
}
func (m *MsgGasParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgGasParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgGasParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgGasParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgGasParams.Merge(m, src)
}
func (m *MsgGasParams) XXX_Size() int {
	return m.Size()
}
func (m *MsgGasParams) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgGasParams.DiscardUnknown(m)
}

var xxx_messageInfo_MsgGasParams proto.InternalMessageInfo

type isMsgGasParams_GasParams interface {
	isMsgGasParams_GasParams()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type MsgGasParams_FixedType struct {
	FixedType *MsgGasParams_FixedGasParams `protobuf:"bytes,3,opt,name=fixed_type,json=fixedType,proto3,oneof" json:"fixed_type,omitempty"`
}
type MsgGasParams_DynamicType struct {
	DynamicType *MsgGasParams_DynamicGasParams `protobuf:"bytes,4,opt,name=dynamic_type,json=dynamicType,proto3,oneof" json:"dynamic_type,omitempty"`
}

func (*MsgGasParams_FixedType) isMsgGasParams_GasParams()   {}
func (*MsgGasParams_DynamicType) isMsgGasParams_GasParams() {}

func (m *MsgGasParams) GetGasParams() isMsgGasParams_GasParams {
	if m != nil {
		return m.GasParams
	}
	return nil
}

func (m *MsgGasParams) GetMsgTypeUrl() string {
	if m != nil {
		return m.MsgTypeUrl
	}
	return ""
}

func (m *MsgGasParams) GetGasType() GasType {
	if m != nil {
		return m.GasType
	}
	return GasType_GAS_TYPE_UNSPECIFIED
}

func (m *MsgGasParams) GetFixedType() *MsgGasParams_FixedGasParams {
	if x, ok := m.GetGasParams().(*MsgGasParams_FixedType); ok {
		return x.FixedType
	}
	return nil
}

func (m *MsgGasParams) GetDynamicType() *MsgGasParams_DynamicGasParams {
	if x, ok := m.GetGasParams().(*MsgGasParams_DynamicType); ok {
		return x.DynamicType
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*MsgGasParams) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*MsgGasParams_FixedType)(nil),
		(*MsgGasParams_DynamicType)(nil),
	}
}

// FixedGasParams defines the parameters for fixed gas type.
type MsgGasParams_FixedGasParams struct {
	FixedGas uint64 `protobuf:"varint,1,opt,name=fixed_gas,json=fixedGas,proto3" json:"fixed_gas,omitempty"`
}

func (m *MsgGasParams_FixedGasParams) Reset()         { *m = MsgGasParams_FixedGasParams{} }
func (m *MsgGasParams_FixedGasParams) String() string { return proto.CompactTextString(m) }
func (*MsgGasParams_FixedGasParams) ProtoMessage()    {}
func (*MsgGasParams_FixedGasParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_f79bf23b48853a4a, []int{1, 0}
}
func (m *MsgGasParams_FixedGasParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgGasParams_FixedGasParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgGasParams_FixedGasParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgGasParams_FixedGasParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgGasParams_FixedGasParams.Merge(m, src)
}
func (m *MsgGasParams_FixedGasParams) XXX_Size() int {
	return m.Size()
}
func (m *MsgGasParams_FixedGasParams) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgGasParams_FixedGasParams.DiscardUnknown(m)
}

var xxx_messageInfo_MsgGasParams_FixedGasParams proto.InternalMessageInfo

func (m *MsgGasParams_FixedGasParams) GetFixedGas() uint64 {
	if m != nil {
		return m.FixedGas
	}
	return 0
}

// DynamicGasParams defines the parameters for dynamic gas type.
type MsgGasParams_DynamicGasParams struct {
	FixedGas   uint64 `protobuf:"varint,1,opt,name=fixed_gas,json=fixedGas,proto3" json:"fixed_gas,omitempty"`
	GasPerItem uint64 `protobuf:"varint,2,opt,name=gas_per_item,json=gasPerItem,proto3" json:"gas_per_item,omitempty"`
}

func (m *MsgGasParams_DynamicGasParams) Reset()         { *m = MsgGasParams_DynamicGasParams{} }
func (m *MsgGasParams_DynamicGasParams) String() string { return proto.CompactTextString(m) }
func (*MsgGasParams_DynamicGasParams) ProtoMessage()    {}
func (*MsgGasParams_DynamicGasParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_f79bf23b48853a4a, []int{1, 1}
}
func (m *MsgGasParams_DynamicGasParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgGasParams_DynamicGasParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgGasParams_DynamicGasParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgGasParams_DynamicGasParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgGasParams_DynamicGasParams.Merge(m, src)
}
func (m *MsgGasParams_DynamicGasParams) XXX_Size() int {
	return m.Size()
}
func (m *MsgGasParams_DynamicGasParams) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgGasParams_DynamicGasParams.DiscardUnknown(m)
}

var xxx_messageInfo_MsgGasParams_DynamicGasParams proto.InternalMessageInfo

func (m *MsgGasParams_DynamicGasParams) GetFixedGas() uint64 {
	if m != nil {
		return m.FixedGas
	}
	return 0
}

func (m *MsgGasParams_DynamicGasParams) GetGasPerItem() uint64 {
	if m != nil {
		return m.GasPerItem
	}
	return 0
}

func init() {
	proto.RegisterEnum("cosmos.gashub.v1alpha1.GasType", GasType_name, GasType_value)
	proto.RegisterType((*Params)(nil), "cosmos.gashub.v1alpha1.Params")
	proto.RegisterType((*MsgGasParams)(nil), "cosmos.gashub.v1alpha1.MsgGasParams")
	proto.RegisterType((*MsgGasParams_FixedGasParams)(nil), "cosmos.gashub.v1alpha1.MsgGasParams.FixedGasParams")
	proto.RegisterType((*MsgGasParams_DynamicGasParams)(nil), "cosmos.gashub.v1alpha1.MsgGasParams.DynamicGasParams")
}

func init() {
	proto.RegisterFile("cosmos/gashub/v1alpha1/gashub.proto", fileDescriptor_f79bf23b48853a4a)
}

var fileDescriptor_f79bf23b48853a4a = []byte{
	// 556 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x53, 0x4d, 0x6f, 0xda, 0x40,
	0x10, 0xb5, 0x13, 0x94, 0xc0, 0xf0, 0x11, 0x77, 0x8b, 0x2a, 0xc4, 0xc1, 0x46, 0x69, 0x0f, 0xb4,
	0x55, 0xa0, 0x21, 0xea, 0x85, 0x1b, 0x0e, 0x1f, 0xe5, 0xe0, 0x08, 0x19, 0x22, 0x35, 0xb9, 0x58,
	0x06, 0x16, 0xc7, 0x2a, 0x8b, 0x91, 0xd7, 0x54, 0x26, 0xff, 0xa0, 0xb7, 0x1e, 0x7b, 0xcc, 0xcf,
	0xe9, 0x31, 0xc7, 0x9e, 0xac, 0xca, 0xa8, 0x52, 0x7f, 0x46, 0xb5, 0x5e, 0x9b, 0x92, 0xaa, 0x95,
	0xd2, 0x8b, 0x3d, 0x33, 0x7e, 0xef, 0xcd, 0x8e, 0xdf, 0x2c, 0x3c, 0x9f, 0x38, 0x94, 0x38, 0xb4,
	0x6e, 0x99, 0xf4, 0x66, 0x35, 0xae, 0x7f, 0x3c, 0x35, 0xe7, 0xcb, 0x1b, 0xf3, 0x34, 0xce, 0x6b,
	0x4b, 0xd7, 0xf1, 0x1c, 0xf4, 0x8c, 0x83, 0x6a, 0x71, 0x31, 0x01, 0x95, 0x8b, 0x96, 0x63, 0x39,
	0x11, 0xa4, 0xce, 0x22, 0x8e, 0x3e, 0xfe, 0x21, 0xc2, 0xc1, 0xc0, 0x74, 0x4d, 0x42, 0xd1, 0x09,
	0x64, 0x89, 0xe9, 0x1b, 0x9e, 0x6f, 0x50, 0xfb, 0x16, 0x97, 0xc4, 0x8a, 0x58, 0x4d, 0xa9, 0xf9,
	0x30, 0x50, 0x32, 0x9a, 0xe9, 0x8f, 0xfc, 0xa1, 0x7d, 0x8b, 0xf5, 0x0c, 0x49, 0x42, 0xd4, 0x04,
	0x89, 0xd8, 0x0b, 0xc3, 0x32, 0xa9, 0xb1, 0xc4, 0xae, 0x31, 0x5e, 0x7b, 0xb8, 0xb4, 0x17, 0x71,
	0x9e, 0x84, 0x81, 0x92, 0xd7, 0xec, 0x45, 0xcf, 0xa4, 0x03, 0xec, 0xaa, 0x6b, 0x0f, 0xeb, 0x79,
	0xb2, 0x9b, 0xa2, 0x19, 0x20, 0x42, 0x2d, 0xce, 0x8d, 0x9a, 0x1b, 0x14, 0x7b, 0xa5, 0xfd, 0xca,
	0x7e, 0x35, 0xdb, 0x78, 0x51, 0xfb, 0xfb, 0x00, 0x35, 0x8d, 0x5a, 0x4c, 0x22, 0xc2, 0xab, 0x4f,
	0xc3, 0x40, 0x39, 0xda, 0xad, 0x0c, 0xb1, 0xa7, 0x1f, 0x91, 0x87, 0x85, 0x66, 0xfa, 0xcb, 0x9d,
	0x22, 0xfc, 0xbc, 0x53, 0xc4, 0xe3, 0x4f, 0x29, 0xc8, 0xed, 0xc2, 0xd1, 0x1b, 0xc8, 0xb1, 0x23,
	0x78, 0xeb, 0x25, 0x36, 0x56, 0xee, 0x3c, 0x1a, 0x37, 0xa3, 0x16, 0xc2, 0x40, 0x01, 0x8d, 0x5a,
	0xa3, 0xf5, 0x12, 0x5f, 0xba, 0x73, 0x1d, 0xc8, 0x36, 0x46, 0x3d, 0x48, 0xb3, 0x03, 0x33, 0x46,
	0x34, 0x68, 0xa1, 0xa1, 0xfc, 0xeb, 0xa8, 0x3d, 0x93, 0x32, 0x96, 0x9a, 0x0d, 0x03, 0xe5, 0x30,
	0x4e, 0xf4, 0x43, 0x8b, 0x07, 0x68, 0x04, 0x30, 0xb3, 0x7d, 0x3c, 0xe5, 0x52, 0xfb, 0x15, 0xb1,
	0x9a, 0x6d, 0x9c, 0x3d, 0x66, 0xea, 0x5a, 0x97, 0xd1, 0xb6, 0xe9, 0x3b, 0x41, 0xcf, 0x44, 0x42,
	0x91, 0xea, 0x35, 0xe4, 0xa6, 0xeb, 0x85, 0x49, 0xec, 0x09, 0xd7, 0x4d, 0x45, 0xba, 0x6f, 0x1f,
	0xa5, 0xdb, 0xe6, 0xc4, 0x5d, 0xe5, 0x6c, 0x2c, 0xc6, 0xb4, 0xcb, 0x2d, 0x28, 0x3c, 0x6c, 0x8d,
	0x5e, 0x02, 0x6f, 0xcd, 0x3c, 0x8c, 0x57, 0x25, 0x17, 0x06, 0x4a, 0x3a, 0x81, 0xe9, 0xe9, 0x59,
	0x1c, 0x35, 0x53, 0xcc, 0x80, 0xf2, 0x0a, 0xa4, 0x3f, 0xbb, 0xfc, 0x87, 0x08, 0xb3, 0x2b, 0xd9,
	0x34, 0xdb, 0xc3, 0x24, 0xde, 0xb4, 0xc8, 0x2e, 0xbe, 0x57, 0x7d, 0x0f, 0x13, 0x1d, 0xac, 0x6d,
	0xcc, 0xdb, 0xf2, 0xa7, 0x9a, 0x03, 0xf8, 0xbd, 0x6b, 0xaf, 0x34, 0x48, 0x3c, 0x41, 0x25, 0x28,
	0xf6, 0x5a, 0x43, 0x63, 0x74, 0x35, 0xe8, 0x18, 0x97, 0x17, 0xc3, 0x41, 0xe7, 0xbc, 0xdf, 0xed,
	0x77, 0xda, 0x92, 0x80, 0x10, 0x14, 0xb6, 0x5f, 0xba, 0xfd, 0xf7, 0x9d, 0xb6, 0x24, 0xa2, 0x22,
	0x48, 0xdb, 0x5a, 0xfb, 0xea, 0xa2, 0xa5, 0xf5, 0xcf, 0xa5, 0x3d, 0xb5, 0xf3, 0x35, 0x94, 0xc5,
	0xfb, 0x50, 0x16, 0xbf, 0x87, 0xb2, 0xf8, 0x79, 0x23, 0x0b, 0xf7, 0x1b, 0x59, 0xf8, 0xb6, 0x91,
	0x85, 0xeb, 0xd7, 0x96, 0xed, 0xb1, 0x9f, 0x3e, 0x71, 0x48, 0x3d, 0xbe, 0xba, 0xfc, 0x75, 0x42,
	0xa7, 0x1f, 0xea, 0x7e, 0x72, 0x8f, 0x99, 0x5d, 0x74, 0x7c, 0x10, 0x5d, 0xc8, 0xb3, 0x5f, 0x01,
	0x00, 0x00, 0xff, 0xff, 0x54, 0xf8, 0x37, 0xba, 0xe5, 0x03, 0x00, 0x00,
}

func (this *Params) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Params)
	if !ok {
		that2, ok := that.(Params)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.MaxTxSize != that1.MaxTxSize {
		return false
	}
	if this.MinGasPerByte != that1.MinGasPerByte {
		return false
	}
	if len(this.MsgGasParamsSet) != len(that1.MsgGasParamsSet) {
		return false
	}
	for i := range this.MsgGasParamsSet {
		if !this.MsgGasParamsSet[i].Equal(that1.MsgGasParamsSet[i]) {
			return false
		}
	}
	return true
}
func (this *MsgGasParams) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MsgGasParams)
	if !ok {
		that2, ok := that.(MsgGasParams)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.MsgTypeUrl != that1.MsgTypeUrl {
		return false
	}
	if this.GasType != that1.GasType {
		return false
	}
	if that1.GasParams == nil {
		if this.GasParams != nil {
			return false
		}
	} else if this.GasParams == nil {
		return false
	} else if !this.GasParams.Equal(that1.GasParams) {
		return false
	}
	return true
}
func (this *MsgGasParams_FixedType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MsgGasParams_FixedType)
	if !ok {
		that2, ok := that.(MsgGasParams_FixedType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.FixedType.Equal(that1.FixedType) {
		return false
	}
	return true
}
func (this *MsgGasParams_DynamicType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MsgGasParams_DynamicType)
	if !ok {
		that2, ok := that.(MsgGasParams_DynamicType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DynamicType.Equal(that1.DynamicType) {
		return false
	}
	return true
}
func (this *MsgGasParams_FixedGasParams) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MsgGasParams_FixedGasParams)
	if !ok {
		that2, ok := that.(MsgGasParams_FixedGasParams)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.FixedGas != that1.FixedGas {
		return false
	}
	return true
}
func (this *MsgGasParams_DynamicGasParams) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MsgGasParams_DynamicGasParams)
	if !ok {
		that2, ok := that.(MsgGasParams_DynamicGasParams)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.FixedGas != that1.FixedGas {
		return false
	}
	if this.GasPerItem != that1.GasPerItem {
		return false
	}
	return true
}
func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.MsgGasParamsSet) > 0 {
		for iNdEx := len(m.MsgGasParamsSet) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.MsgGasParamsSet[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGashub(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.MinGasPerByte != 0 {
		i = encodeVarintGashub(dAtA, i, uint64(m.MinGasPerByte))
		i--
		dAtA[i] = 0x10
	}
	if m.MaxTxSize != 0 {
		i = encodeVarintGashub(dAtA, i, uint64(m.MaxTxSize))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgGasParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgGasParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgGasParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.GasParams != nil {
		{
			size := m.GasParams.Size()
			i -= size
			if _, err := m.GasParams.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.GasType != 0 {
		i = encodeVarintGashub(dAtA, i, uint64(m.GasType))
		i--
		dAtA[i] = 0x10
	}
	if len(m.MsgTypeUrl) > 0 {
		i -= len(m.MsgTypeUrl)
		copy(dAtA[i:], m.MsgTypeUrl)
		i = encodeVarintGashub(dAtA, i, uint64(len(m.MsgTypeUrl)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgGasParams_FixedType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgGasParams_FixedType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.FixedType != nil {
		{
			size, err := m.FixedType.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGashub(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *MsgGasParams_DynamicType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgGasParams_DynamicType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DynamicType != nil {
		{
			size, err := m.DynamicType.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGashub(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *MsgGasParams_FixedGasParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgGasParams_FixedGasParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgGasParams_FixedGasParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.FixedGas != 0 {
		i = encodeVarintGashub(dAtA, i, uint64(m.FixedGas))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgGasParams_DynamicGasParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgGasParams_DynamicGasParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgGasParams_DynamicGasParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.GasPerItem != 0 {
		i = encodeVarintGashub(dAtA, i, uint64(m.GasPerItem))
		i--
		dAtA[i] = 0x10
	}
	if m.FixedGas != 0 {
		i = encodeVarintGashub(dAtA, i, uint64(m.FixedGas))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintGashub(dAtA []byte, offset int, v uint64) int {
	offset -= sovGashub(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MaxTxSize != 0 {
		n += 1 + sovGashub(uint64(m.MaxTxSize))
	}
	if m.MinGasPerByte != 0 {
		n += 1 + sovGashub(uint64(m.MinGasPerByte))
	}
	if len(m.MsgGasParamsSet) > 0 {
		for _, e := range m.MsgGasParamsSet {
			l = e.Size()
			n += 1 + l + sovGashub(uint64(l))
		}
	}
	return n
}

func (m *MsgGasParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.MsgTypeUrl)
	if l > 0 {
		n += 1 + l + sovGashub(uint64(l))
	}
	if m.GasType != 0 {
		n += 1 + sovGashub(uint64(m.GasType))
	}
	if m.GasParams != nil {
		n += m.GasParams.Size()
	}
	return n
}

func (m *MsgGasParams_FixedType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FixedType != nil {
		l = m.FixedType.Size()
		n += 1 + l + sovGashub(uint64(l))
	}
	return n
}
func (m *MsgGasParams_DynamicType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DynamicType != nil {
		l = m.DynamicType.Size()
		n += 1 + l + sovGashub(uint64(l))
	}
	return n
}
func (m *MsgGasParams_FixedGasParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FixedGas != 0 {
		n += 1 + sovGashub(uint64(m.FixedGas))
	}
	return n
}

func (m *MsgGasParams_DynamicGasParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FixedGas != 0 {
		n += 1 + sovGashub(uint64(m.FixedGas))
	}
	if m.GasPerItem != 0 {
		n += 1 + sovGashub(uint64(m.GasPerItem))
	}
	return n
}

func sovGashub(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozGashub(x uint64) (n int) {
	return sovGashub(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGashub
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxTxSize", wireType)
			}
			m.MaxTxSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGashub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxTxSize |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinGasPerByte", wireType)
			}
			m.MinGasPerByte = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGashub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinGasPerByte |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgGasParamsSet", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGashub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGashub
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGashub
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MsgGasParamsSet = append(m.MsgGasParamsSet, &MsgGasParams{})
			if err := m.MsgGasParamsSet[len(m.MsgGasParamsSet)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGashub(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGashub
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgGasParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGashub
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgGasParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgGasParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgTypeUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGashub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGashub
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGashub
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MsgTypeUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GasType", wireType)
			}
			m.GasType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGashub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GasType |= GasType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FixedType", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGashub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGashub
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGashub
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &MsgGasParams_FixedGasParams{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.GasParams = &MsgGasParams_FixedType{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DynamicType", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGashub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGashub
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGashub
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &MsgGasParams_DynamicGasParams{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.GasParams = &MsgGasParams_DynamicType{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGashub(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGashub
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgGasParams_FixedGasParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGashub
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FixedGasParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FixedGasParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FixedGas", wireType)
			}
			m.FixedGas = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGashub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FixedGas |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGashub(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGashub
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgGasParams_DynamicGasParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGashub
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DynamicGasParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DynamicGasParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FixedGas", wireType)
			}
			m.FixedGas = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGashub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FixedGas |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GasPerItem", wireType)
			}
			m.GasPerItem = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGashub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GasPerItem |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGashub(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGashub
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGashub(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGashub
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGashub
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGashub
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthGashub
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupGashub
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthGashub
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthGashub        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGashub          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupGashub = fmt.Errorf("proto: unexpected end of group")
)
