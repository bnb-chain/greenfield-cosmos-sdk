// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: cosmos/gashub/v1alpha1/gashub.proto

package types

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Params defines the parameters for the gashub module.
type Params struct {
	MaxTxSize                   uint64 `protobuf:"varint,1,opt,name=max_tx_size,json=maxTxSize,proto3" json:"max_tx_size,omitempty"`
	MinGasPerByte               uint64 `protobuf:"varint,2,opt,name=min_gas_per_byte,json=minGasPerByte,proto3" json:"min_gas_per_byte,omitempty"`
	FixedMsgGas                 uint64 `protobuf:"varint,3,opt,name=fixed_msg_gas,json=fixedMsgGas,proto3" json:"fixed_msg_gas,omitempty"`
	MsgGrantPerItemGas          uint64 `protobuf:"varint,4,opt,name=msg_grant_per_item_gas,json=msgGrantPerItemGas,proto3" json:"msg_grant_per_item_gas,omitempty"`
	MsgMultiSendPerItemGas      uint64 `protobuf:"varint,5,opt,name=msg_multi_send_per_item_gas,json=msgMultiSendPerItemGas,proto3" json:"msg_multi_send_per_item_gas,omitempty"`
	MsgGrantAllowancePerItemGas uint64 `protobuf:"varint,6,opt,name=msg_grant_allowance_per_item_gas,json=msgGrantAllowancePerItemGas,proto3" json:"msg_grant_allowance_per_item_gas,omitempty"`
}

func (m *Params) Reset()      { *m = Params{} }
func (*Params) ProtoMessage() {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_f79bf23b48853a4a, []int{0}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

func (m *Params) GetMaxTxSize() uint64 {
	if m != nil {
		return m.MaxTxSize
	}
	return 0
}

func (m *Params) GetMinGasPerByte() uint64 {
	if m != nil {
		return m.MinGasPerByte
	}
	return 0
}

func (m *Params) GetFixedMsgGas() uint64 {
	if m != nil {
		return m.FixedMsgGas
	}
	return 0
}

func (m *Params) GetMsgGrantPerItemGas() uint64 {
	if m != nil {
		return m.MsgGrantPerItemGas
	}
	return 0
}

func (m *Params) GetMsgMultiSendPerItemGas() uint64 {
	if m != nil {
		return m.MsgMultiSendPerItemGas
	}
	return 0
}

func (m *Params) GetMsgGrantAllowancePerItemGas() uint64 {
	if m != nil {
		return m.MsgGrantAllowancePerItemGas
	}
	return 0
}

func init() {
	proto.RegisterType((*Params)(nil), "cosmos.gashub.v1alpha1.Params")
}

func init() {
	proto.RegisterFile("cosmos/gashub/v1alpha1/gashub.proto", fileDescriptor_f79bf23b48853a4a)
}

var fileDescriptor_f79bf23b48853a4a = []byte{
	// 400 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x92, 0x41, 0xcb, 0xd3, 0x30,
	0x18, 0xc7, 0x5b, 0xdf, 0xd7, 0xe1, 0x9b, 0x51, 0xd4, 0x20, 0x65, 0xbc, 0x83, 0xe6, 0x45, 0x2f,
	0x82, 0x6c, 0x65, 0xec, 0xb6, 0x9b, 0x03, 0x1d, 0x0a, 0x85, 0xb1, 0x09, 0x82, 0x97, 0x92, 0xad,
	0x59, 0x16, 0x6c, 0x9a, 0xd2, 0x64, 0xda, 0xed, 0x53, 0x78, 0xf4, 0xb8, 0x6f, 0xe2, 0xd5, 0xe3,
	0x8e, 0x9e, 0x8a, 0x64, 0x17, 0x3f, 0x86, 0x24, 0x5b, 0xd9, 0x86, 0xbe, 0xa7, 0xe4, 0x79, 0xf2,
	0x7b, 0x7e, 0x79, 0x0e, 0x7f, 0xf0, 0x62, 0x2e, 0x24, 0x17, 0x32, 0xa4, 0x58, 0x2e, 0x57, 0xb3,
	0xf0, 0x4b, 0x0f, 0xa7, 0xf9, 0x12, 0xf7, 0x8e, 0x75, 0x37, 0x2f, 0x84, 0x12, 0xd0, 0x3f, 0x40,
	0xdd, 0x63, 0xb3, 0x86, 0x6e, 0x9f, 0x51, 0x41, 0x85, 0x45, 0x42, 0x73, 0x3b, 0xd0, 0xcf, 0x7f,
	0x5c, 0x81, 0xc6, 0x18, 0x17, 0x98, 0x4b, 0xd8, 0x01, 0x4d, 0x8e, 0xcb, 0x58, 0x95, 0xb1, 0x64,
	0x1b, 0xd2, 0x72, 0xef, 0xdc, 0x97, 0xd7, 0x43, 0x4f, 0x57, 0xe8, 0x26, 0xc2, 0xe5, 0x87, 0x72,
	0xca, 0x36, 0x64, 0x72, 0xc3, 0xeb, 0x2b, 0x1c, 0x80, 0x27, 0x9c, 0x65, 0x31, 0xc5, 0x32, 0xce,
	0x49, 0x11, 0xcf, 0xd6, 0x8a, 0xb4, 0x1e, 0xd8, 0x99, 0xa7, 0xba, 0x42, 0x5e, 0xc4, 0xb2, 0x11,
	0x96, 0x63, 0x52, 0x0c, 0xd7, 0x8a, 0x4c, 0x3c, 0x7e, 0x5e, 0xc2, 0x3e, 0xf0, 0x16, 0xac, 0x24,
	0x49, 0xcc, 0x25, 0x35, 0x86, 0xd6, 0x95, 0x1d, 0x7c, 0xac, 0x2b, 0xd4, 0x7c, 0x6b, 0x1e, 0x22,
	0x49, 0x47, 0x58, 0x4e, 0x9a, 0x8b, 0x53, 0x01, 0xdf, 0x03, 0xdf, 0xe2, 0x05, 0xce, 0x94, 0xfd,
	0x92, 0x29, 0xc2, 0xed, 0xf4, 0xb5, 0x9d, 0xf6, 0x75, 0x85, 0xa0, 0x61, 0x0d, 0x30, 0x26, 0xc5,
	0x3b, 0x45, 0xb8, 0x91, 0x40, 0xfe, 0x4f, 0x0f, 0x7e, 0x04, 0x6d, 0xe3, 0xe2, 0xab, 0x54, 0xb1,
	0x58, 0x92, 0x2c, 0xb9, 0x14, 0x3e, 0xb4, 0xc2, 0x5b, 0x5d, 0x21, 0x3f, 0x92, 0x34, 0x32, 0xd4,
	0x94, 0x64, 0xc9, 0x99, 0xd4, 0xac, 0xf2, 0x9f, 0x3e, 0x5c, 0x80, 0xbb, 0xd3, 0x92, 0x38, 0x4d,
	0xc5, 0x57, 0x9c, 0xcd, 0xc9, 0xa5, 0xbd, 0x61, 0xed, 0x48, 0x57, 0xa8, 0x5d, 0xaf, 0xfb, 0xba,
	0x26, 0xcf, 0xbe, 0x68, 0xf3, 0xfb, 0x1f, 0x07, 0x8f, 0xbe, 0x6f, 0x91, 0xf3, 0x67, 0x8b, 0xdc,
	0xe1, 0x9b, 0x9f, 0x3a, 0x70, 0x77, 0x3a, 0x70, 0x7f, 0xeb, 0xc0, 0xfd, 0xb6, 0x0f, 0x9c, 0xdd,
	0x3e, 0x70, 0x7e, 0xed, 0x03, 0xe7, 0xd3, 0x2b, 0xca, 0x94, 0x89, 0xc0, 0x5c, 0xf0, 0xf0, 0x98,
	0x9c, 0xc3, 0xd1, 0x91, 0xc9, 0xe7, 0xb0, 0xac, 0x63, 0xa4, 0xd6, 0x39, 0x91, 0xb3, 0x86, 0xcd,
	0x43, 0xff, 0x6f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x24, 0x68, 0xb2, 0xf5, 0x64, 0x02, 0x00, 0x00,
}

func (this *Params) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Params)
	if !ok {
		that2, ok := that.(Params)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.MaxTxSize != that1.MaxTxSize {
		return false
	}
	if this.MinGasPerByte != that1.MinGasPerByte {
		return false
	}
	if this.FixedMsgGas != that1.FixedMsgGas {
		return false
	}
	if this.MsgGrantPerItemGas != that1.MsgGrantPerItemGas {
		return false
	}
	if this.MsgMultiSendPerItemGas != that1.MsgMultiSendPerItemGas {
		return false
	}
	if this.MsgGrantAllowancePerItemGas != that1.MsgGrantAllowancePerItemGas {
		return false
	}
	return true
}
func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MsgGrantAllowancePerItemGas != 0 {
		i = encodeVarintGashub(dAtA, i, uint64(m.MsgGrantAllowancePerItemGas))
		i--
		dAtA[i] = 0x30
	}
	if m.MsgMultiSendPerItemGas != 0 {
		i = encodeVarintGashub(dAtA, i, uint64(m.MsgMultiSendPerItemGas))
		i--
		dAtA[i] = 0x28
	}
	if m.MsgGrantPerItemGas != 0 {
		i = encodeVarintGashub(dAtA, i, uint64(m.MsgGrantPerItemGas))
		i--
		dAtA[i] = 0x20
	}
	if m.FixedMsgGas != 0 {
		i = encodeVarintGashub(dAtA, i, uint64(m.FixedMsgGas))
		i--
		dAtA[i] = 0x18
	}
	if m.MinGasPerByte != 0 {
		i = encodeVarintGashub(dAtA, i, uint64(m.MinGasPerByte))
		i--
		dAtA[i] = 0x10
	}
	if m.MaxTxSize != 0 {
		i = encodeVarintGashub(dAtA, i, uint64(m.MaxTxSize))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintGashub(dAtA []byte, offset int, v uint64) int {
	offset -= sovGashub(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MaxTxSize != 0 {
		n += 1 + sovGashub(uint64(m.MaxTxSize))
	}
	if m.MinGasPerByte != 0 {
		n += 1 + sovGashub(uint64(m.MinGasPerByte))
	}
	if m.FixedMsgGas != 0 {
		n += 1 + sovGashub(uint64(m.FixedMsgGas))
	}
	if m.MsgGrantPerItemGas != 0 {
		n += 1 + sovGashub(uint64(m.MsgGrantPerItemGas))
	}
	if m.MsgMultiSendPerItemGas != 0 {
		n += 1 + sovGashub(uint64(m.MsgMultiSendPerItemGas))
	}
	if m.MsgGrantAllowancePerItemGas != 0 {
		n += 1 + sovGashub(uint64(m.MsgGrantAllowancePerItemGas))
	}
	return n
}

func sovGashub(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozGashub(x uint64) (n int) {
	return sovGashub(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGashub
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxTxSize", wireType)
			}
			m.MaxTxSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGashub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxTxSize |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinGasPerByte", wireType)
			}
			m.MinGasPerByte = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGashub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinGasPerByte |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FixedMsgGas", wireType)
			}
			m.FixedMsgGas = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGashub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FixedMsgGas |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgGrantPerItemGas", wireType)
			}
			m.MsgGrantPerItemGas = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGashub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MsgGrantPerItemGas |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgMultiSendPerItemGas", wireType)
			}
			m.MsgMultiSendPerItemGas = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGashub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MsgMultiSendPerItemGas |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgGrantAllowancePerItemGas", wireType)
			}
			m.MsgGrantAllowancePerItemGas = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGashub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MsgGrantAllowancePerItemGas |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGashub(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGashub
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGashub(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGashub
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGashub
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGashub
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthGashub
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupGashub
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthGashub
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthGashub        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGashub          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupGashub = fmt.Errorf("proto: unexpected end of group")
)
