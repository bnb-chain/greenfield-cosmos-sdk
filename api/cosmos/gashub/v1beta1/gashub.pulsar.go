// Code generated by protoc-gen-go-pulsar. DO NOT EDIT.
package gashubv1beta1

import (
	_ "cosmossdk.io/api/amino"
	fmt "fmt"
	runtime "github.com/cosmos/cosmos-proto/runtime"
	_ "github.com/cosmos/gogoproto/gogoproto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoiface "google.golang.org/protobuf/runtime/protoiface"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	io "io"
	reflect "reflect"
	sync "sync"
)

var (
	md_Params                  protoreflect.MessageDescriptor
	fd_Params_max_tx_size      protoreflect.FieldDescriptor
	fd_Params_min_gas_per_byte protoreflect.FieldDescriptor
)

func init() {
	file_cosmos_gashub_v1beta1_gashub_proto_init()
	md_Params = File_cosmos_gashub_v1beta1_gashub_proto.Messages().ByName("Params")
	fd_Params_max_tx_size = md_Params.Fields().ByName("max_tx_size")
	fd_Params_min_gas_per_byte = md_Params.Fields().ByName("min_gas_per_byte")
}

var _ protoreflect.Message = (*fastReflection_Params)(nil)

type fastReflection_Params Params

func (x *Params) ProtoReflect() protoreflect.Message {
	return (*fastReflection_Params)(x)
}

func (x *Params) slowProtoReflect() protoreflect.Message {
	mi := &file_cosmos_gashub_v1beta1_gashub_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_Params_messageType fastReflection_Params_messageType
var _ protoreflect.MessageType = fastReflection_Params_messageType{}

type fastReflection_Params_messageType struct{}

func (x fastReflection_Params_messageType) Zero() protoreflect.Message {
	return (*fastReflection_Params)(nil)
}
func (x fastReflection_Params_messageType) New() protoreflect.Message {
	return new(fastReflection_Params)
}
func (x fastReflection_Params_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_Params
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_Params) Descriptor() protoreflect.MessageDescriptor {
	return md_Params
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_Params) Type() protoreflect.MessageType {
	return _fastReflection_Params_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_Params) New() protoreflect.Message {
	return new(fastReflection_Params)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_Params) Interface() protoreflect.ProtoMessage {
	return (*Params)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_Params) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.MaxTxSize != uint64(0) {
		value := protoreflect.ValueOfUint64(x.MaxTxSize)
		if !f(fd_Params_max_tx_size, value) {
			return
		}
	}
	if x.MinGasPerByte != uint64(0) {
		value := protoreflect.ValueOfUint64(x.MinGasPerByte)
		if !f(fd_Params_min_gas_per_byte, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_Params) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "cosmos.gashub.v1beta1.Params.max_tx_size":
		return x.MaxTxSize != uint64(0)
	case "cosmos.gashub.v1beta1.Params.min_gas_per_byte":
		return x.MinGasPerByte != uint64(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: cosmos.gashub.v1beta1.Params"))
		}
		panic(fmt.Errorf("message cosmos.gashub.v1beta1.Params does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Params) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "cosmos.gashub.v1beta1.Params.max_tx_size":
		x.MaxTxSize = uint64(0)
	case "cosmos.gashub.v1beta1.Params.min_gas_per_byte":
		x.MinGasPerByte = uint64(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: cosmos.gashub.v1beta1.Params"))
		}
		panic(fmt.Errorf("message cosmos.gashub.v1beta1.Params does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_Params) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "cosmos.gashub.v1beta1.Params.max_tx_size":
		value := x.MaxTxSize
		return protoreflect.ValueOfUint64(value)
	case "cosmos.gashub.v1beta1.Params.min_gas_per_byte":
		value := x.MinGasPerByte
		return protoreflect.ValueOfUint64(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: cosmos.gashub.v1beta1.Params"))
		}
		panic(fmt.Errorf("message cosmos.gashub.v1beta1.Params does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Params) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "cosmos.gashub.v1beta1.Params.max_tx_size":
		x.MaxTxSize = value.Uint()
	case "cosmos.gashub.v1beta1.Params.min_gas_per_byte":
		x.MinGasPerByte = value.Uint()
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: cosmos.gashub.v1beta1.Params"))
		}
		panic(fmt.Errorf("message cosmos.gashub.v1beta1.Params does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Params) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "cosmos.gashub.v1beta1.Params.max_tx_size":
		panic(fmt.Errorf("field max_tx_size of message cosmos.gashub.v1beta1.Params is not mutable"))
	case "cosmos.gashub.v1beta1.Params.min_gas_per_byte":
		panic(fmt.Errorf("field min_gas_per_byte of message cosmos.gashub.v1beta1.Params is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: cosmos.gashub.v1beta1.Params"))
		}
		panic(fmt.Errorf("message cosmos.gashub.v1beta1.Params does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_Params) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "cosmos.gashub.v1beta1.Params.max_tx_size":
		return protoreflect.ValueOfUint64(uint64(0))
	case "cosmos.gashub.v1beta1.Params.min_gas_per_byte":
		return protoreflect.ValueOfUint64(uint64(0))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: cosmos.gashub.v1beta1.Params"))
		}
		panic(fmt.Errorf("message cosmos.gashub.v1beta1.Params does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_Params) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in cosmos.gashub.v1beta1.Params", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_Params) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Params) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_Params) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_Params) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*Params)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.MaxTxSize != 0 {
			n += 1 + runtime.Sov(uint64(x.MaxTxSize))
		}
		if x.MinGasPerByte != 0 {
			n += 1 + runtime.Sov(uint64(x.MinGasPerByte))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*Params)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.MinGasPerByte != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.MinGasPerByte))
			i--
			dAtA[i] = 0x10
		}
		if x.MaxTxSize != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.MaxTxSize))
			i--
			dAtA[i] = 0x8
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*Params)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: Params: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field MaxTxSize", wireType)
				}
				x.MaxTxSize = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.MaxTxSize |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 2:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field MinGasPerByte", wireType)
				}
				x.MinGasPerByte = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.MinGasPerByte |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_MsgGasParams                      protoreflect.MessageDescriptor
	fd_MsgGasParams_msg_type_url         protoreflect.FieldDescriptor
	fd_MsgGasParams_fixed_type           protoreflect.FieldDescriptor
	fd_MsgGasParams_grant_type           protoreflect.FieldDescriptor
	fd_MsgGasParams_multi_send_type      protoreflect.FieldDescriptor
	fd_MsgGasParams_grant_allowance_type protoreflect.FieldDescriptor
)

func init() {
	file_cosmos_gashub_v1beta1_gashub_proto_init()
	md_MsgGasParams = File_cosmos_gashub_v1beta1_gashub_proto.Messages().ByName("MsgGasParams")
	fd_MsgGasParams_msg_type_url = md_MsgGasParams.Fields().ByName("msg_type_url")
	fd_MsgGasParams_fixed_type = md_MsgGasParams.Fields().ByName("fixed_type")
	fd_MsgGasParams_grant_type = md_MsgGasParams.Fields().ByName("grant_type")
	fd_MsgGasParams_multi_send_type = md_MsgGasParams.Fields().ByName("multi_send_type")
	fd_MsgGasParams_grant_allowance_type = md_MsgGasParams.Fields().ByName("grant_allowance_type")
}

var _ protoreflect.Message = (*fastReflection_MsgGasParams)(nil)

type fastReflection_MsgGasParams MsgGasParams

func (x *MsgGasParams) ProtoReflect() protoreflect.Message {
	return (*fastReflection_MsgGasParams)(x)
}

func (x *MsgGasParams) slowProtoReflect() protoreflect.Message {
	mi := &file_cosmos_gashub_v1beta1_gashub_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_MsgGasParams_messageType fastReflection_MsgGasParams_messageType
var _ protoreflect.MessageType = fastReflection_MsgGasParams_messageType{}

type fastReflection_MsgGasParams_messageType struct{}

func (x fastReflection_MsgGasParams_messageType) Zero() protoreflect.Message {
	return (*fastReflection_MsgGasParams)(nil)
}
func (x fastReflection_MsgGasParams_messageType) New() protoreflect.Message {
	return new(fastReflection_MsgGasParams)
}
func (x fastReflection_MsgGasParams_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_MsgGasParams
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_MsgGasParams) Descriptor() protoreflect.MessageDescriptor {
	return md_MsgGasParams
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_MsgGasParams) Type() protoreflect.MessageType {
	return _fastReflection_MsgGasParams_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_MsgGasParams) New() protoreflect.Message {
	return new(fastReflection_MsgGasParams)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_MsgGasParams) Interface() protoreflect.ProtoMessage {
	return (*MsgGasParams)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_MsgGasParams) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.MsgTypeUrl != "" {
		value := protoreflect.ValueOfString(x.MsgTypeUrl)
		if !f(fd_MsgGasParams_msg_type_url, value) {
			return
		}
	}
	if x.GasParams != nil {
		switch o := x.GasParams.(type) {
		case *MsgGasParams_FixedType:
			v := o.FixedType
			value := protoreflect.ValueOfMessage(v.ProtoReflect())
			if !f(fd_MsgGasParams_fixed_type, value) {
				return
			}
		case *MsgGasParams_GrantType:
			v := o.GrantType
			value := protoreflect.ValueOfMessage(v.ProtoReflect())
			if !f(fd_MsgGasParams_grant_type, value) {
				return
			}
		case *MsgGasParams_MultiSendType:
			v := o.MultiSendType
			value := protoreflect.ValueOfMessage(v.ProtoReflect())
			if !f(fd_MsgGasParams_multi_send_type, value) {
				return
			}
		case *MsgGasParams_GrantAllowanceType:
			v := o.GrantAllowanceType
			value := protoreflect.ValueOfMessage(v.ProtoReflect())
			if !f(fd_MsgGasParams_grant_allowance_type, value) {
				return
			}
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_MsgGasParams) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "cosmos.gashub.v1beta1.MsgGasParams.msg_type_url":
		return x.MsgTypeUrl != ""
	case "cosmos.gashub.v1beta1.MsgGasParams.fixed_type":
		if x.GasParams == nil {
			return false
		} else if _, ok := x.GasParams.(*MsgGasParams_FixedType); ok {
			return true
		} else {
			return false
		}
	case "cosmos.gashub.v1beta1.MsgGasParams.grant_type":
		if x.GasParams == nil {
			return false
		} else if _, ok := x.GasParams.(*MsgGasParams_GrantType); ok {
			return true
		} else {
			return false
		}
	case "cosmos.gashub.v1beta1.MsgGasParams.multi_send_type":
		if x.GasParams == nil {
			return false
		} else if _, ok := x.GasParams.(*MsgGasParams_MultiSendType); ok {
			return true
		} else {
			return false
		}
	case "cosmos.gashub.v1beta1.MsgGasParams.grant_allowance_type":
		if x.GasParams == nil {
			return false
		} else if _, ok := x.GasParams.(*MsgGasParams_GrantAllowanceType); ok {
			return true
		} else {
			return false
		}
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: cosmos.gashub.v1beta1.MsgGasParams"))
		}
		panic(fmt.Errorf("message cosmos.gashub.v1beta1.MsgGasParams does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_MsgGasParams) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "cosmos.gashub.v1beta1.MsgGasParams.msg_type_url":
		x.MsgTypeUrl = ""
	case "cosmos.gashub.v1beta1.MsgGasParams.fixed_type":
		x.GasParams = nil
	case "cosmos.gashub.v1beta1.MsgGasParams.grant_type":
		x.GasParams = nil
	case "cosmos.gashub.v1beta1.MsgGasParams.multi_send_type":
		x.GasParams = nil
	case "cosmos.gashub.v1beta1.MsgGasParams.grant_allowance_type":
		x.GasParams = nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: cosmos.gashub.v1beta1.MsgGasParams"))
		}
		panic(fmt.Errorf("message cosmos.gashub.v1beta1.MsgGasParams does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_MsgGasParams) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "cosmos.gashub.v1beta1.MsgGasParams.msg_type_url":
		value := x.MsgTypeUrl
		return protoreflect.ValueOfString(value)
	case "cosmos.gashub.v1beta1.MsgGasParams.fixed_type":
		if x.GasParams == nil {
			return protoreflect.ValueOfMessage((*MsgGasParams_FixedGasParams)(nil).ProtoReflect())
		} else if v, ok := x.GasParams.(*MsgGasParams_FixedType); ok {
			return protoreflect.ValueOfMessage(v.FixedType.ProtoReflect())
		} else {
			return protoreflect.ValueOfMessage((*MsgGasParams_FixedGasParams)(nil).ProtoReflect())
		}
	case "cosmos.gashub.v1beta1.MsgGasParams.grant_type":
		if x.GasParams == nil {
			return protoreflect.ValueOfMessage((*MsgGasParams_DynamicGasParams)(nil).ProtoReflect())
		} else if v, ok := x.GasParams.(*MsgGasParams_GrantType); ok {
			return protoreflect.ValueOfMessage(v.GrantType.ProtoReflect())
		} else {
			return protoreflect.ValueOfMessage((*MsgGasParams_DynamicGasParams)(nil).ProtoReflect())
		}
	case "cosmos.gashub.v1beta1.MsgGasParams.multi_send_type":
		if x.GasParams == nil {
			return protoreflect.ValueOfMessage((*MsgGasParams_DynamicGasParams)(nil).ProtoReflect())
		} else if v, ok := x.GasParams.(*MsgGasParams_MultiSendType); ok {
			return protoreflect.ValueOfMessage(v.MultiSendType.ProtoReflect())
		} else {
			return protoreflect.ValueOfMessage((*MsgGasParams_DynamicGasParams)(nil).ProtoReflect())
		}
	case "cosmos.gashub.v1beta1.MsgGasParams.grant_allowance_type":
		if x.GasParams == nil {
			return protoreflect.ValueOfMessage((*MsgGasParams_DynamicGasParams)(nil).ProtoReflect())
		} else if v, ok := x.GasParams.(*MsgGasParams_GrantAllowanceType); ok {
			return protoreflect.ValueOfMessage(v.GrantAllowanceType.ProtoReflect())
		} else {
			return protoreflect.ValueOfMessage((*MsgGasParams_DynamicGasParams)(nil).ProtoReflect())
		}
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: cosmos.gashub.v1beta1.MsgGasParams"))
		}
		panic(fmt.Errorf("message cosmos.gashub.v1beta1.MsgGasParams does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_MsgGasParams) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "cosmos.gashub.v1beta1.MsgGasParams.msg_type_url":
		x.MsgTypeUrl = value.Interface().(string)
	case "cosmos.gashub.v1beta1.MsgGasParams.fixed_type":
		cv := value.Message().Interface().(*MsgGasParams_FixedGasParams)
		x.GasParams = &MsgGasParams_FixedType{FixedType: cv}
	case "cosmos.gashub.v1beta1.MsgGasParams.grant_type":
		cv := value.Message().Interface().(*MsgGasParams_DynamicGasParams)
		x.GasParams = &MsgGasParams_GrantType{GrantType: cv}
	case "cosmos.gashub.v1beta1.MsgGasParams.multi_send_type":
		cv := value.Message().Interface().(*MsgGasParams_DynamicGasParams)
		x.GasParams = &MsgGasParams_MultiSendType{MultiSendType: cv}
	case "cosmos.gashub.v1beta1.MsgGasParams.grant_allowance_type":
		cv := value.Message().Interface().(*MsgGasParams_DynamicGasParams)
		x.GasParams = &MsgGasParams_GrantAllowanceType{GrantAllowanceType: cv}
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: cosmos.gashub.v1beta1.MsgGasParams"))
		}
		panic(fmt.Errorf("message cosmos.gashub.v1beta1.MsgGasParams does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_MsgGasParams) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "cosmos.gashub.v1beta1.MsgGasParams.fixed_type":
		if x.GasParams == nil {
			value := &MsgGasParams_FixedGasParams{}
			oneofValue := &MsgGasParams_FixedType{FixedType: value}
			x.GasParams = oneofValue
			return protoreflect.ValueOfMessage(value.ProtoReflect())
		}
		switch m := x.GasParams.(type) {
		case *MsgGasParams_FixedType:
			return protoreflect.ValueOfMessage(m.FixedType.ProtoReflect())
		default:
			value := &MsgGasParams_FixedGasParams{}
			oneofValue := &MsgGasParams_FixedType{FixedType: value}
			x.GasParams = oneofValue
			return protoreflect.ValueOfMessage(value.ProtoReflect())
		}
	case "cosmos.gashub.v1beta1.MsgGasParams.grant_type":
		if x.GasParams == nil {
			value := &MsgGasParams_DynamicGasParams{}
			oneofValue := &MsgGasParams_GrantType{GrantType: value}
			x.GasParams = oneofValue
			return protoreflect.ValueOfMessage(value.ProtoReflect())
		}
		switch m := x.GasParams.(type) {
		case *MsgGasParams_GrantType:
			return protoreflect.ValueOfMessage(m.GrantType.ProtoReflect())
		default:
			value := &MsgGasParams_DynamicGasParams{}
			oneofValue := &MsgGasParams_GrantType{GrantType: value}
			x.GasParams = oneofValue
			return protoreflect.ValueOfMessage(value.ProtoReflect())
		}
	case "cosmos.gashub.v1beta1.MsgGasParams.multi_send_type":
		if x.GasParams == nil {
			value := &MsgGasParams_DynamicGasParams{}
			oneofValue := &MsgGasParams_MultiSendType{MultiSendType: value}
			x.GasParams = oneofValue
			return protoreflect.ValueOfMessage(value.ProtoReflect())
		}
		switch m := x.GasParams.(type) {
		case *MsgGasParams_MultiSendType:
			return protoreflect.ValueOfMessage(m.MultiSendType.ProtoReflect())
		default:
			value := &MsgGasParams_DynamicGasParams{}
			oneofValue := &MsgGasParams_MultiSendType{MultiSendType: value}
			x.GasParams = oneofValue
			return protoreflect.ValueOfMessage(value.ProtoReflect())
		}
	case "cosmos.gashub.v1beta1.MsgGasParams.grant_allowance_type":
		if x.GasParams == nil {
			value := &MsgGasParams_DynamicGasParams{}
			oneofValue := &MsgGasParams_GrantAllowanceType{GrantAllowanceType: value}
			x.GasParams = oneofValue
			return protoreflect.ValueOfMessage(value.ProtoReflect())
		}
		switch m := x.GasParams.(type) {
		case *MsgGasParams_GrantAllowanceType:
			return protoreflect.ValueOfMessage(m.GrantAllowanceType.ProtoReflect())
		default:
			value := &MsgGasParams_DynamicGasParams{}
			oneofValue := &MsgGasParams_GrantAllowanceType{GrantAllowanceType: value}
			x.GasParams = oneofValue
			return protoreflect.ValueOfMessage(value.ProtoReflect())
		}
	case "cosmos.gashub.v1beta1.MsgGasParams.msg_type_url":
		panic(fmt.Errorf("field msg_type_url of message cosmos.gashub.v1beta1.MsgGasParams is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: cosmos.gashub.v1beta1.MsgGasParams"))
		}
		panic(fmt.Errorf("message cosmos.gashub.v1beta1.MsgGasParams does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_MsgGasParams) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "cosmos.gashub.v1beta1.MsgGasParams.msg_type_url":
		return protoreflect.ValueOfString("")
	case "cosmos.gashub.v1beta1.MsgGasParams.fixed_type":
		value := &MsgGasParams_FixedGasParams{}
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "cosmos.gashub.v1beta1.MsgGasParams.grant_type":
		value := &MsgGasParams_DynamicGasParams{}
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "cosmos.gashub.v1beta1.MsgGasParams.multi_send_type":
		value := &MsgGasParams_DynamicGasParams{}
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "cosmos.gashub.v1beta1.MsgGasParams.grant_allowance_type":
		value := &MsgGasParams_DynamicGasParams{}
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: cosmos.gashub.v1beta1.MsgGasParams"))
		}
		panic(fmt.Errorf("message cosmos.gashub.v1beta1.MsgGasParams does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_MsgGasParams) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	case "cosmos.gashub.v1beta1.MsgGasParams.gas_params":
		if x.GasParams == nil {
			return nil
		}
		switch x.GasParams.(type) {
		case *MsgGasParams_FixedType:
			return x.Descriptor().Fields().ByName("fixed_type")
		case *MsgGasParams_GrantType:
			return x.Descriptor().Fields().ByName("grant_type")
		case *MsgGasParams_MultiSendType:
			return x.Descriptor().Fields().ByName("multi_send_type")
		case *MsgGasParams_GrantAllowanceType:
			return x.Descriptor().Fields().ByName("grant_allowance_type")
		}
	default:
		panic(fmt.Errorf("%s is not a oneof field in cosmos.gashub.v1beta1.MsgGasParams", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_MsgGasParams) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_MsgGasParams) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_MsgGasParams) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_MsgGasParams) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*MsgGasParams)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.MsgTypeUrl)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		switch x := x.GasParams.(type) {
		case *MsgGasParams_FixedType:
			if x == nil {
				break
			}
			l = options.Size(x.FixedType)
			n += 1 + l + runtime.Sov(uint64(l))
		case *MsgGasParams_GrantType:
			if x == nil {
				break
			}
			l = options.Size(x.GrantType)
			n += 1 + l + runtime.Sov(uint64(l))
		case *MsgGasParams_MultiSendType:
			if x == nil {
				break
			}
			l = options.Size(x.MultiSendType)
			n += 1 + l + runtime.Sov(uint64(l))
		case *MsgGasParams_GrantAllowanceType:
			if x == nil {
				break
			}
			l = options.Size(x.GrantAllowanceType)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*MsgGasParams)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		switch x := x.GasParams.(type) {
		case *MsgGasParams_FixedType:
			encoded, err := options.Marshal(x.FixedType)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x12
		case *MsgGasParams_GrantType:
			encoded, err := options.Marshal(x.GrantType)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x1a
		case *MsgGasParams_MultiSendType:
			encoded, err := options.Marshal(x.MultiSendType)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x22
		case *MsgGasParams_GrantAllowanceType:
			encoded, err := options.Marshal(x.GrantAllowanceType)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x2a
		}
		if len(x.MsgTypeUrl) > 0 {
			i -= len(x.MsgTypeUrl)
			copy(dAtA[i:], x.MsgTypeUrl)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.MsgTypeUrl)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*MsgGasParams)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: MsgGasParams: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: MsgGasParams: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field MsgTypeUrl", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.MsgTypeUrl = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field FixedType", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				v := &MsgGasParams_FixedGasParams{}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], v); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				x.GasParams = &MsgGasParams_FixedType{v}
				iNdEx = postIndex
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field GrantType", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				v := &MsgGasParams_DynamicGasParams{}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], v); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				x.GasParams = &MsgGasParams_GrantType{v}
				iNdEx = postIndex
			case 4:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field MultiSendType", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				v := &MsgGasParams_DynamicGasParams{}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], v); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				x.GasParams = &MsgGasParams_MultiSendType{v}
				iNdEx = postIndex
			case 5:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field GrantAllowanceType", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				v := &MsgGasParams_DynamicGasParams{}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], v); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				x.GasParams = &MsgGasParams_GrantAllowanceType{v}
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_MsgGasParams_FixedGasParams           protoreflect.MessageDescriptor
	fd_MsgGasParams_FixedGasParams_fixed_gas protoreflect.FieldDescriptor
)

func init() {
	file_cosmos_gashub_v1beta1_gashub_proto_init()
	md_MsgGasParams_FixedGasParams = File_cosmos_gashub_v1beta1_gashub_proto.Messages().ByName("MsgGasParams").Messages().ByName("FixedGasParams")
	fd_MsgGasParams_FixedGasParams_fixed_gas = md_MsgGasParams_FixedGasParams.Fields().ByName("fixed_gas")
}

var _ protoreflect.Message = (*fastReflection_MsgGasParams_FixedGasParams)(nil)

type fastReflection_MsgGasParams_FixedGasParams MsgGasParams_FixedGasParams

func (x *MsgGasParams_FixedGasParams) ProtoReflect() protoreflect.Message {
	return (*fastReflection_MsgGasParams_FixedGasParams)(x)
}

func (x *MsgGasParams_FixedGasParams) slowProtoReflect() protoreflect.Message {
	mi := &file_cosmos_gashub_v1beta1_gashub_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_MsgGasParams_FixedGasParams_messageType fastReflection_MsgGasParams_FixedGasParams_messageType
var _ protoreflect.MessageType = fastReflection_MsgGasParams_FixedGasParams_messageType{}

type fastReflection_MsgGasParams_FixedGasParams_messageType struct{}

func (x fastReflection_MsgGasParams_FixedGasParams_messageType) Zero() protoreflect.Message {
	return (*fastReflection_MsgGasParams_FixedGasParams)(nil)
}
func (x fastReflection_MsgGasParams_FixedGasParams_messageType) New() protoreflect.Message {
	return new(fastReflection_MsgGasParams_FixedGasParams)
}
func (x fastReflection_MsgGasParams_FixedGasParams_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_MsgGasParams_FixedGasParams
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_MsgGasParams_FixedGasParams) Descriptor() protoreflect.MessageDescriptor {
	return md_MsgGasParams_FixedGasParams
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_MsgGasParams_FixedGasParams) Type() protoreflect.MessageType {
	return _fastReflection_MsgGasParams_FixedGasParams_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_MsgGasParams_FixedGasParams) New() protoreflect.Message {
	return new(fastReflection_MsgGasParams_FixedGasParams)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_MsgGasParams_FixedGasParams) Interface() protoreflect.ProtoMessage {
	return (*MsgGasParams_FixedGasParams)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_MsgGasParams_FixedGasParams) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.FixedGas != uint64(0) {
		value := protoreflect.ValueOfUint64(x.FixedGas)
		if !f(fd_MsgGasParams_FixedGasParams_fixed_gas, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_MsgGasParams_FixedGasParams) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "cosmos.gashub.v1beta1.MsgGasParams.FixedGasParams.fixed_gas":
		return x.FixedGas != uint64(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: cosmos.gashub.v1beta1.MsgGasParams.FixedGasParams"))
		}
		panic(fmt.Errorf("message cosmos.gashub.v1beta1.MsgGasParams.FixedGasParams does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_MsgGasParams_FixedGasParams) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "cosmos.gashub.v1beta1.MsgGasParams.FixedGasParams.fixed_gas":
		x.FixedGas = uint64(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: cosmos.gashub.v1beta1.MsgGasParams.FixedGasParams"))
		}
		panic(fmt.Errorf("message cosmos.gashub.v1beta1.MsgGasParams.FixedGasParams does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_MsgGasParams_FixedGasParams) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "cosmos.gashub.v1beta1.MsgGasParams.FixedGasParams.fixed_gas":
		value := x.FixedGas
		return protoreflect.ValueOfUint64(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: cosmos.gashub.v1beta1.MsgGasParams.FixedGasParams"))
		}
		panic(fmt.Errorf("message cosmos.gashub.v1beta1.MsgGasParams.FixedGasParams does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_MsgGasParams_FixedGasParams) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "cosmos.gashub.v1beta1.MsgGasParams.FixedGasParams.fixed_gas":
		x.FixedGas = value.Uint()
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: cosmos.gashub.v1beta1.MsgGasParams.FixedGasParams"))
		}
		panic(fmt.Errorf("message cosmos.gashub.v1beta1.MsgGasParams.FixedGasParams does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_MsgGasParams_FixedGasParams) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "cosmos.gashub.v1beta1.MsgGasParams.FixedGasParams.fixed_gas":
		panic(fmt.Errorf("field fixed_gas of message cosmos.gashub.v1beta1.MsgGasParams.FixedGasParams is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: cosmos.gashub.v1beta1.MsgGasParams.FixedGasParams"))
		}
		panic(fmt.Errorf("message cosmos.gashub.v1beta1.MsgGasParams.FixedGasParams does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_MsgGasParams_FixedGasParams) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "cosmos.gashub.v1beta1.MsgGasParams.FixedGasParams.fixed_gas":
		return protoreflect.ValueOfUint64(uint64(0))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: cosmos.gashub.v1beta1.MsgGasParams.FixedGasParams"))
		}
		panic(fmt.Errorf("message cosmos.gashub.v1beta1.MsgGasParams.FixedGasParams does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_MsgGasParams_FixedGasParams) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in cosmos.gashub.v1beta1.MsgGasParams.FixedGasParams", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_MsgGasParams_FixedGasParams) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_MsgGasParams_FixedGasParams) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_MsgGasParams_FixedGasParams) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_MsgGasParams_FixedGasParams) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*MsgGasParams_FixedGasParams)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.FixedGas != 0 {
			n += 1 + runtime.Sov(uint64(x.FixedGas))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*MsgGasParams_FixedGasParams)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.FixedGas != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.FixedGas))
			i--
			dAtA[i] = 0x8
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*MsgGasParams_FixedGasParams)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: MsgGasParams_FixedGasParams: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: MsgGasParams_FixedGasParams: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field FixedGas", wireType)
				}
				x.FixedGas = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.FixedGas |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_MsgGasParams_DynamicGasParams              protoreflect.MessageDescriptor
	fd_MsgGasParams_DynamicGasParams_fixed_gas    protoreflect.FieldDescriptor
	fd_MsgGasParams_DynamicGasParams_gas_per_item protoreflect.FieldDescriptor
)

func init() {
	file_cosmos_gashub_v1beta1_gashub_proto_init()
	md_MsgGasParams_DynamicGasParams = File_cosmos_gashub_v1beta1_gashub_proto.Messages().ByName("MsgGasParams").Messages().ByName("DynamicGasParams")
	fd_MsgGasParams_DynamicGasParams_fixed_gas = md_MsgGasParams_DynamicGasParams.Fields().ByName("fixed_gas")
	fd_MsgGasParams_DynamicGasParams_gas_per_item = md_MsgGasParams_DynamicGasParams.Fields().ByName("gas_per_item")
}

var _ protoreflect.Message = (*fastReflection_MsgGasParams_DynamicGasParams)(nil)

type fastReflection_MsgGasParams_DynamicGasParams MsgGasParams_DynamicGasParams

func (x *MsgGasParams_DynamicGasParams) ProtoReflect() protoreflect.Message {
	return (*fastReflection_MsgGasParams_DynamicGasParams)(x)
}

func (x *MsgGasParams_DynamicGasParams) slowProtoReflect() protoreflect.Message {
	mi := &file_cosmos_gashub_v1beta1_gashub_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_MsgGasParams_DynamicGasParams_messageType fastReflection_MsgGasParams_DynamicGasParams_messageType
var _ protoreflect.MessageType = fastReflection_MsgGasParams_DynamicGasParams_messageType{}

type fastReflection_MsgGasParams_DynamicGasParams_messageType struct{}

func (x fastReflection_MsgGasParams_DynamicGasParams_messageType) Zero() protoreflect.Message {
	return (*fastReflection_MsgGasParams_DynamicGasParams)(nil)
}
func (x fastReflection_MsgGasParams_DynamicGasParams_messageType) New() protoreflect.Message {
	return new(fastReflection_MsgGasParams_DynamicGasParams)
}
func (x fastReflection_MsgGasParams_DynamicGasParams_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_MsgGasParams_DynamicGasParams
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_MsgGasParams_DynamicGasParams) Descriptor() protoreflect.MessageDescriptor {
	return md_MsgGasParams_DynamicGasParams
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_MsgGasParams_DynamicGasParams) Type() protoreflect.MessageType {
	return _fastReflection_MsgGasParams_DynamicGasParams_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_MsgGasParams_DynamicGasParams) New() protoreflect.Message {
	return new(fastReflection_MsgGasParams_DynamicGasParams)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_MsgGasParams_DynamicGasParams) Interface() protoreflect.ProtoMessage {
	return (*MsgGasParams_DynamicGasParams)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_MsgGasParams_DynamicGasParams) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.FixedGas != uint64(0) {
		value := protoreflect.ValueOfUint64(x.FixedGas)
		if !f(fd_MsgGasParams_DynamicGasParams_fixed_gas, value) {
			return
		}
	}
	if x.GasPerItem != uint64(0) {
		value := protoreflect.ValueOfUint64(x.GasPerItem)
		if !f(fd_MsgGasParams_DynamicGasParams_gas_per_item, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_MsgGasParams_DynamicGasParams) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "cosmos.gashub.v1beta1.MsgGasParams.DynamicGasParams.fixed_gas":
		return x.FixedGas != uint64(0)
	case "cosmos.gashub.v1beta1.MsgGasParams.DynamicGasParams.gas_per_item":
		return x.GasPerItem != uint64(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: cosmos.gashub.v1beta1.MsgGasParams.DynamicGasParams"))
		}
		panic(fmt.Errorf("message cosmos.gashub.v1beta1.MsgGasParams.DynamicGasParams does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_MsgGasParams_DynamicGasParams) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "cosmos.gashub.v1beta1.MsgGasParams.DynamicGasParams.fixed_gas":
		x.FixedGas = uint64(0)
	case "cosmos.gashub.v1beta1.MsgGasParams.DynamicGasParams.gas_per_item":
		x.GasPerItem = uint64(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: cosmos.gashub.v1beta1.MsgGasParams.DynamicGasParams"))
		}
		panic(fmt.Errorf("message cosmos.gashub.v1beta1.MsgGasParams.DynamicGasParams does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_MsgGasParams_DynamicGasParams) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "cosmos.gashub.v1beta1.MsgGasParams.DynamicGasParams.fixed_gas":
		value := x.FixedGas
		return protoreflect.ValueOfUint64(value)
	case "cosmos.gashub.v1beta1.MsgGasParams.DynamicGasParams.gas_per_item":
		value := x.GasPerItem
		return protoreflect.ValueOfUint64(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: cosmos.gashub.v1beta1.MsgGasParams.DynamicGasParams"))
		}
		panic(fmt.Errorf("message cosmos.gashub.v1beta1.MsgGasParams.DynamicGasParams does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_MsgGasParams_DynamicGasParams) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "cosmos.gashub.v1beta1.MsgGasParams.DynamicGasParams.fixed_gas":
		x.FixedGas = value.Uint()
	case "cosmos.gashub.v1beta1.MsgGasParams.DynamicGasParams.gas_per_item":
		x.GasPerItem = value.Uint()
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: cosmos.gashub.v1beta1.MsgGasParams.DynamicGasParams"))
		}
		panic(fmt.Errorf("message cosmos.gashub.v1beta1.MsgGasParams.DynamicGasParams does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_MsgGasParams_DynamicGasParams) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "cosmos.gashub.v1beta1.MsgGasParams.DynamicGasParams.fixed_gas":
		panic(fmt.Errorf("field fixed_gas of message cosmos.gashub.v1beta1.MsgGasParams.DynamicGasParams is not mutable"))
	case "cosmos.gashub.v1beta1.MsgGasParams.DynamicGasParams.gas_per_item":
		panic(fmt.Errorf("field gas_per_item of message cosmos.gashub.v1beta1.MsgGasParams.DynamicGasParams is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: cosmos.gashub.v1beta1.MsgGasParams.DynamicGasParams"))
		}
		panic(fmt.Errorf("message cosmos.gashub.v1beta1.MsgGasParams.DynamicGasParams does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_MsgGasParams_DynamicGasParams) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "cosmos.gashub.v1beta1.MsgGasParams.DynamicGasParams.fixed_gas":
		return protoreflect.ValueOfUint64(uint64(0))
	case "cosmos.gashub.v1beta1.MsgGasParams.DynamicGasParams.gas_per_item":
		return protoreflect.ValueOfUint64(uint64(0))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: cosmos.gashub.v1beta1.MsgGasParams.DynamicGasParams"))
		}
		panic(fmt.Errorf("message cosmos.gashub.v1beta1.MsgGasParams.DynamicGasParams does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_MsgGasParams_DynamicGasParams) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in cosmos.gashub.v1beta1.MsgGasParams.DynamicGasParams", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_MsgGasParams_DynamicGasParams) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_MsgGasParams_DynamicGasParams) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_MsgGasParams_DynamicGasParams) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_MsgGasParams_DynamicGasParams) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*MsgGasParams_DynamicGasParams)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.FixedGas != 0 {
			n += 1 + runtime.Sov(uint64(x.FixedGas))
		}
		if x.GasPerItem != 0 {
			n += 1 + runtime.Sov(uint64(x.GasPerItem))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*MsgGasParams_DynamicGasParams)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.GasPerItem != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.GasPerItem))
			i--
			dAtA[i] = 0x10
		}
		if x.FixedGas != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.FixedGas))
			i--
			dAtA[i] = 0x8
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*MsgGasParams_DynamicGasParams)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: MsgGasParams_DynamicGasParams: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: MsgGasParams_DynamicGasParams: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field FixedGas", wireType)
				}
				x.FixedGas = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.FixedGas |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 2:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field GasPerItem", wireType)
				}
				x.GasPerItem = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.GasPerItem |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.0
// 	protoc        (unknown)
// source: cosmos/gashub/v1beta1/gashub.proto

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Params defines the parameters for the gashub module.
type Params struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// max_tx_size is the maximum size of a transaction's bytes.
	MaxTxSize uint64 `protobuf:"varint,1,opt,name=max_tx_size,json=maxTxSize,proto3" json:"max_tx_size,omitempty"`
	// min_gas_per_byte is the minimum gas to be paid per byte of a transaction's
	MinGasPerByte uint64 `protobuf:"varint,2,opt,name=min_gas_per_byte,json=minGasPerByte,proto3" json:"min_gas_per_byte,omitempty"`
}

func (x *Params) Reset() {
	*x = Params{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cosmos_gashub_v1beta1_gashub_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Params) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Params) ProtoMessage() {}

// Deprecated: Use Params.ProtoReflect.Descriptor instead.
func (*Params) Descriptor() ([]byte, []int) {
	return file_cosmos_gashub_v1beta1_gashub_proto_rawDescGZIP(), []int{0}
}

func (x *Params) GetMaxTxSize() uint64 {
	if x != nil {
		return x.MaxTxSize
	}
	return 0
}

func (x *Params) GetMinGasPerByte() uint64 {
	if x != nil {
		return x.MinGasPerByte
	}
	return 0
}

// MsgGasParams defines gas consumption for a msg type
type MsgGasParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MsgTypeUrl string `protobuf:"bytes,1,opt,name=msg_type_url,json=msgTypeUrl,proto3" json:"msg_type_url,omitempty"`
	// gas_params is the oneof that represents either fixed_gas_params or dynamic_gas_params
	//
	// Types that are assignable to GasParams:
	//
	//	*MsgGasParams_FixedType
	//	*MsgGasParams_GrantType
	//	*MsgGasParams_MultiSendType
	//	*MsgGasParams_GrantAllowanceType
	GasParams isMsgGasParams_GasParams `protobuf_oneof:"gas_params"`
}

func (x *MsgGasParams) Reset() {
	*x = MsgGasParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cosmos_gashub_v1beta1_gashub_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgGasParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgGasParams) ProtoMessage() {}

// Deprecated: Use MsgGasParams.ProtoReflect.Descriptor instead.
func (*MsgGasParams) Descriptor() ([]byte, []int) {
	return file_cosmos_gashub_v1beta1_gashub_proto_rawDescGZIP(), []int{1}
}

func (x *MsgGasParams) GetMsgTypeUrl() string {
	if x != nil {
		return x.MsgTypeUrl
	}
	return ""
}

func (x *MsgGasParams) GetGasParams() isMsgGasParams_GasParams {
	if x != nil {
		return x.GasParams
	}
	return nil
}

func (x *MsgGasParams) GetFixedType() *MsgGasParams_FixedGasParams {
	if x, ok := x.GetGasParams().(*MsgGasParams_FixedType); ok {
		return x.FixedType
	}
	return nil
}

func (x *MsgGasParams) GetGrantType() *MsgGasParams_DynamicGasParams {
	if x, ok := x.GetGasParams().(*MsgGasParams_GrantType); ok {
		return x.GrantType
	}
	return nil
}

func (x *MsgGasParams) GetMultiSendType() *MsgGasParams_DynamicGasParams {
	if x, ok := x.GetGasParams().(*MsgGasParams_MultiSendType); ok {
		return x.MultiSendType
	}
	return nil
}

func (x *MsgGasParams) GetGrantAllowanceType() *MsgGasParams_DynamicGasParams {
	if x, ok := x.GetGasParams().(*MsgGasParams_GrantAllowanceType); ok {
		return x.GrantAllowanceType
	}
	return nil
}

type isMsgGasParams_GasParams interface {
	isMsgGasParams_GasParams()
}

type MsgGasParams_FixedType struct {
	// fixed_type specifies fixed type gas params.
	FixedType *MsgGasParams_FixedGasParams `protobuf:"bytes,2,opt,name=fixed_type,json=fixedType,proto3,oneof"`
}

type MsgGasParams_GrantType struct {
	// grant_type specifies dynamic type gas params for msg/grant.
	GrantType *MsgGasParams_DynamicGasParams `protobuf:"bytes,3,opt,name=grant_type,json=grantType,proto3,oneof"`
}

type MsgGasParams_MultiSendType struct {
	// grant_type specifies dynamic type gas params for msg/multiSend.
	MultiSendType *MsgGasParams_DynamicGasParams `protobuf:"bytes,4,opt,name=multi_send_type,json=multiSendType,proto3,oneof"`
}

type MsgGasParams_GrantAllowanceType struct {
	// grant_type specifies dynamic type gas params for msg/grantAllowance.
	GrantAllowanceType *MsgGasParams_DynamicGasParams `protobuf:"bytes,5,opt,name=grant_allowance_type,json=grantAllowanceType,proto3,oneof"`
}

func (*MsgGasParams_FixedType) isMsgGasParams_GasParams() {}

func (*MsgGasParams_GrantType) isMsgGasParams_GasParams() {}

func (*MsgGasParams_MultiSendType) isMsgGasParams_GasParams() {}

func (*MsgGasParams_GrantAllowanceType) isMsgGasParams_GasParams() {}

// FixedGasParams defines the parameters for fixed gas type.
type MsgGasParams_FixedGasParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// fixed_gas is the gas cost for a fixed type msg
	FixedGas uint64 `protobuf:"varint,1,opt,name=fixed_gas,json=fixedGas,proto3" json:"fixed_gas,omitempty"`
}

func (x *MsgGasParams_FixedGasParams) Reset() {
	*x = MsgGasParams_FixedGasParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cosmos_gashub_v1beta1_gashub_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgGasParams_FixedGasParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgGasParams_FixedGasParams) ProtoMessage() {}

// Deprecated: Use MsgGasParams_FixedGasParams.ProtoReflect.Descriptor instead.
func (*MsgGasParams_FixedGasParams) Descriptor() ([]byte, []int) {
	return file_cosmos_gashub_v1beta1_gashub_proto_rawDescGZIP(), []int{1, 0}
}

func (x *MsgGasParams_FixedGasParams) GetFixedGas() uint64 {
	if x != nil {
		return x.FixedGas
	}
	return 0
}

// DynamicGasParams defines the parameters for dynamic gas type.
type MsgGasParams_DynamicGasParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// fixed_gas is the base gas cost for a dynamic type msg
	FixedGas uint64 `protobuf:"varint,1,opt,name=fixed_gas,json=fixedGas,proto3" json:"fixed_gas,omitempty"`
	// gas_per_item is the gas cost for a dynamic type msg per item
	GasPerItem uint64 `protobuf:"varint,2,opt,name=gas_per_item,json=gasPerItem,proto3" json:"gas_per_item,omitempty"`
}

func (x *MsgGasParams_DynamicGasParams) Reset() {
	*x = MsgGasParams_DynamicGasParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cosmos_gashub_v1beta1_gashub_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgGasParams_DynamicGasParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgGasParams_DynamicGasParams) ProtoMessage() {}

// Deprecated: Use MsgGasParams_DynamicGasParams.ProtoReflect.Descriptor instead.
func (*MsgGasParams_DynamicGasParams) Descriptor() ([]byte, []int) {
	return file_cosmos_gashub_v1beta1_gashub_proto_rawDescGZIP(), []int{1, 1}
}

func (x *MsgGasParams_DynamicGasParams) GetFixedGas() uint64 {
	if x != nil {
		return x.FixedGas
	}
	return 0
}

func (x *MsgGasParams_DynamicGasParams) GetGasPerItem() uint64 {
	if x != nil {
		return x.GasPerItem
	}
	return 0
}

var File_cosmos_gashub_v1beta1_gashub_proto protoreflect.FileDescriptor

var file_cosmos_gashub_v1beta1_gashub_proto_rawDesc = []byte{
	0x0a, 0x22, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2f, 0x67, 0x61, 0x73, 0x68, 0x75, 0x62, 0x2f,
	0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2f, 0x67, 0x61, 0x73, 0x68, 0x75, 0x62, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x15, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x67, 0x61, 0x73,
	0x68, 0x75, 0x62, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x1a, 0x14, 0x67, 0x6f, 0x67,
	0x6f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x67, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x11, 0x61, 0x6d, 0x69, 0x6e, 0x6f, 0x2f, 0x61, 0x6d, 0x69, 0x6e, 0x6f, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0x98, 0x01, 0x0a, 0x06, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12,
	0x2d, 0x0a, 0x0b, 0x6d, 0x61, 0x78, 0x5f, 0x74, 0x78, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x42, 0x0d, 0xe2, 0xde, 0x1f, 0x09, 0x4d, 0x61, 0x78, 0x54, 0x78, 0x53,
	0x69, 0x7a, 0x65, 0x52, 0x09, 0x6d, 0x61, 0x78, 0x54, 0x78, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x3a,
	0x0a, 0x10, 0x6d, 0x69, 0x6e, 0x5f, 0x67, 0x61, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x62, 0x79,
	0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x42, 0x11, 0xe2, 0xde, 0x1f, 0x0d, 0x4d, 0x69,
	0x6e, 0x47, 0x61, 0x73, 0x50, 0x65, 0x72, 0x42, 0x79, 0x74, 0x65, 0x52, 0x0d, 0x6d, 0x69, 0x6e,
	0x47, 0x61, 0x73, 0x50, 0x65, 0x72, 0x42, 0x79, 0x74, 0x65, 0x3a, 0x23, 0xe8, 0xa0, 0x1f, 0x01,
	0x8a, 0xe7, 0xb0, 0x2a, 0x1a, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2d, 0x73, 0x64, 0x6b, 0x2f,
	0x78, 0x2f, 0x67, 0x61, 0x73, 0x68, 0x75, 0x62, 0x2f, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x22,
	0x84, 0x05, 0x0a, 0x0c, 0x4d, 0x73, 0x67, 0x47, 0x61, 0x73, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73,
	0x12, 0x30, 0x0a, 0x0c, 0x6d, 0x73, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x75, 0x72, 0x6c,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0e, 0xe2, 0xde, 0x1f, 0x0a, 0x4d, 0x73, 0x67, 0x54,
	0x79, 0x70, 0x65, 0x55, 0x72, 0x6c, 0x52, 0x0a, 0x6d, 0x73, 0x67, 0x54, 0x79, 0x70, 0x65, 0x55,
	0x72, 0x6c, 0x12, 0x53, 0x0a, 0x0a, 0x66, 0x69, 0x78, 0x65, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e,
	0x67, 0x61, 0x73, 0x68, 0x75, 0x62, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x4d,
	0x73, 0x67, 0x47, 0x61, 0x73, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x2e, 0x46, 0x69, 0x78, 0x65,
	0x64, 0x47, 0x61, 0x73, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x48, 0x00, 0x52, 0x09, 0x66, 0x69,
	0x78, 0x65, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x55, 0x0a, 0x0a, 0x67, 0x72, 0x61, 0x6e, 0x74,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x63, 0x6f,
	0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x67, 0x61, 0x73, 0x68, 0x75, 0x62, 0x2e, 0x76, 0x31, 0x62, 0x65,
	0x74, 0x61, 0x31, 0x2e, 0x4d, 0x73, 0x67, 0x47, 0x61, 0x73, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73,
	0x2e, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x47, 0x61, 0x73, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x48, 0x00, 0x52, 0x09, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x5e,
	0x0a, 0x0f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73,
	0x2e, 0x67, 0x61, 0x73, 0x68, 0x75, 0x62, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e,
	0x4d, 0x73, 0x67, 0x47, 0x61, 0x73, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x2e, 0x44, 0x79, 0x6e,
	0x61, 0x6d, 0x69, 0x63, 0x47, 0x61, 0x73, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x48, 0x00, 0x52,
	0x0d, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x53, 0x65, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x68,
	0x0a, 0x14, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x61, 0x6e, 0x63,
	0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x63,
	0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x67, 0x61, 0x73, 0x68, 0x75, 0x62, 0x2e, 0x76, 0x31, 0x62,
	0x65, 0x74, 0x61, 0x31, 0x2e, 0x4d, 0x73, 0x67, 0x47, 0x61, 0x73, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x2e, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x47, 0x61, 0x73, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x48, 0x00, 0x52, 0x12, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x41, 0x6c, 0x6c, 0x6f, 0x77,
	0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x1a, 0x41, 0x0a, 0x0e, 0x46, 0x69, 0x78, 0x65,
	0x64, 0x47, 0x61, 0x73, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x29, 0x0a, 0x09, 0x66, 0x69,
	0x78, 0x65, 0x64, 0x5f, 0x67, 0x61, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x0c, 0xe2,
	0xde, 0x1f, 0x08, 0x46, 0x69, 0x78, 0x65, 0x64, 0x47, 0x61, 0x73, 0x52, 0x08, 0x66, 0x69, 0x78,
	0x65, 0x64, 0x47, 0x61, 0x73, 0x3a, 0x04, 0xe8, 0xa0, 0x1f, 0x01, 0x1a, 0x75, 0x0a, 0x10, 0x44,
	0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x47, 0x61, 0x73, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12,
	0x29, 0x0a, 0x09, 0x66, 0x69, 0x78, 0x65, 0x64, 0x5f, 0x67, 0x61, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x42, 0x0c, 0xe2, 0xde, 0x1f, 0x08, 0x46, 0x69, 0x78, 0x65, 0x64, 0x47, 0x61, 0x73,
	0x52, 0x08, 0x66, 0x69, 0x78, 0x65, 0x64, 0x47, 0x61, 0x73, 0x12, 0x30, 0x0a, 0x0c, 0x67, 0x61,
	0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04,
	0x42, 0x0e, 0xe2, 0xde, 0x1f, 0x0a, 0x47, 0x61, 0x73, 0x50, 0x65, 0x72, 0x49, 0x74, 0x65, 0x6d,
	0x52, 0x0a, 0x67, 0x61, 0x73, 0x50, 0x65, 0x72, 0x49, 0x74, 0x65, 0x6d, 0x3a, 0x04, 0xe8, 0xa0,
	0x1f, 0x01, 0x3a, 0x04, 0xe8, 0xa0, 0x1f, 0x01, 0x42, 0x0c, 0x0a, 0x0a, 0x67, 0x61, 0x73, 0x5f,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x42, 0xd4, 0x01, 0x0a, 0x19, 0x63, 0x6f, 0x6d, 0x2e, 0x63,
	0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x67, 0x61, 0x73, 0x68, 0x75, 0x62, 0x2e, 0x76, 0x31, 0x62,
	0x65, 0x74, 0x61, 0x31, 0x42, 0x0b, 0x47, 0x61, 0x73, 0x68, 0x75, 0x62, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x50, 0x01, 0x5a, 0x34, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x73, 0x64, 0x6b, 0x2e, 0x69,
	0x6f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2f, 0x67, 0x61, 0x73,
	0x68, 0x75, 0x62, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x3b, 0x67, 0x61, 0x73, 0x68,
	0x75, 0x62, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0xa2, 0x02, 0x03, 0x43, 0x47, 0x58, 0xaa,
	0x02, 0x15, 0x43, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x47, 0x61, 0x73, 0x68, 0x75, 0x62, 0x2e,
	0x56, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0xca, 0x02, 0x15, 0x43, 0x6f, 0x73, 0x6d, 0x6f, 0x73,
	0x5c, 0x47, 0x61, 0x73, 0x68, 0x75, 0x62, 0x5c, 0x56, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0xe2,
	0x02, 0x21, 0x43, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x5c, 0x47, 0x61, 0x73, 0x68, 0x75, 0x62, 0x5c,
	0x56, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0xea, 0x02, 0x17, 0x43, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x3a, 0x3a, 0x47, 0x61,
	0x73, 0x68, 0x75, 0x62, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_cosmos_gashub_v1beta1_gashub_proto_rawDescOnce sync.Once
	file_cosmos_gashub_v1beta1_gashub_proto_rawDescData = file_cosmos_gashub_v1beta1_gashub_proto_rawDesc
)

func file_cosmos_gashub_v1beta1_gashub_proto_rawDescGZIP() []byte {
	file_cosmos_gashub_v1beta1_gashub_proto_rawDescOnce.Do(func() {
		file_cosmos_gashub_v1beta1_gashub_proto_rawDescData = protoimpl.X.CompressGZIP(file_cosmos_gashub_v1beta1_gashub_proto_rawDescData)
	})
	return file_cosmos_gashub_v1beta1_gashub_proto_rawDescData
}

var file_cosmos_gashub_v1beta1_gashub_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_cosmos_gashub_v1beta1_gashub_proto_goTypes = []interface{}{
	(*Params)(nil),                        // 0: cosmos.gashub.v1beta1.Params
	(*MsgGasParams)(nil),                  // 1: cosmos.gashub.v1beta1.MsgGasParams
	(*MsgGasParams_FixedGasParams)(nil),   // 2: cosmos.gashub.v1beta1.MsgGasParams.FixedGasParams
	(*MsgGasParams_DynamicGasParams)(nil), // 3: cosmos.gashub.v1beta1.MsgGasParams.DynamicGasParams
}
var file_cosmos_gashub_v1beta1_gashub_proto_depIdxs = []int32{
	2, // 0: cosmos.gashub.v1beta1.MsgGasParams.fixed_type:type_name -> cosmos.gashub.v1beta1.MsgGasParams.FixedGasParams
	3, // 1: cosmos.gashub.v1beta1.MsgGasParams.grant_type:type_name -> cosmos.gashub.v1beta1.MsgGasParams.DynamicGasParams
	3, // 2: cosmos.gashub.v1beta1.MsgGasParams.multi_send_type:type_name -> cosmos.gashub.v1beta1.MsgGasParams.DynamicGasParams
	3, // 3: cosmos.gashub.v1beta1.MsgGasParams.grant_allowance_type:type_name -> cosmos.gashub.v1beta1.MsgGasParams.DynamicGasParams
	4, // [4:4] is the sub-list for method output_type
	4, // [4:4] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_cosmos_gashub_v1beta1_gashub_proto_init() }
func file_cosmos_gashub_v1beta1_gashub_proto_init() {
	if File_cosmos_gashub_v1beta1_gashub_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_cosmos_gashub_v1beta1_gashub_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Params); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cosmos_gashub_v1beta1_gashub_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsgGasParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cosmos_gashub_v1beta1_gashub_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsgGasParams_FixedGasParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cosmos_gashub_v1beta1_gashub_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsgGasParams_DynamicGasParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_cosmos_gashub_v1beta1_gashub_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*MsgGasParams_FixedType)(nil),
		(*MsgGasParams_GrantType)(nil),
		(*MsgGasParams_MultiSendType)(nil),
		(*MsgGasParams_GrantAllowanceType)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_cosmos_gashub_v1beta1_gashub_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_cosmos_gashub_v1beta1_gashub_proto_goTypes,
		DependencyIndexes: file_cosmos_gashub_v1beta1_gashub_proto_depIdxs,
		MessageInfos:      file_cosmos_gashub_v1beta1_gashub_proto_msgTypes,
	}.Build()
	File_cosmos_gashub_v1beta1_gashub_proto = out.File
	file_cosmos_gashub_v1beta1_gashub_proto_rawDesc = nil
	file_cosmos_gashub_v1beta1_gashub_proto_goTypes = nil
	file_cosmos_gashub_v1beta1_gashub_proto_depIdxs = nil
}
